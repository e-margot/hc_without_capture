
hcsr04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e24  08002e24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e24  08002e24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002e38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002e38  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086de  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e3  00000000  00000000  00028712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00029bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001806b  00000000  00000000  0002acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ac0  00000000  00000000  00042d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c70c  00000000  00000000  0004c7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe4  00000000  00000000  000d8f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d9c 	.word	0x08002d9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d9c 	.word	0x08002d9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4646      	mov	r6, r8
 8000224:	46d6      	mov	lr, sl
 8000226:	464f      	mov	r7, r9
 8000228:	024d      	lsls	r5, r1, #9
 800022a:	0242      	lsls	r2, r0, #9
 800022c:	b5c0      	push	{r6, r7, lr}
 800022e:	0a52      	lsrs	r2, r2, #9
 8000230:	0a6e      	lsrs	r6, r5, #9
 8000232:	0047      	lsls	r7, r0, #1
 8000234:	46b0      	mov	r8, r6
 8000236:	0e3f      	lsrs	r7, r7, #24
 8000238:	004e      	lsls	r6, r1, #1
 800023a:	0fc4      	lsrs	r4, r0, #31
 800023c:	00d0      	lsls	r0, r2, #3
 800023e:	4694      	mov	ip, r2
 8000240:	003b      	movs	r3, r7
 8000242:	4682      	mov	sl, r0
 8000244:	0e36      	lsrs	r6, r6, #24
 8000246:	0fc9      	lsrs	r1, r1, #31
 8000248:	09ad      	lsrs	r5, r5, #6
 800024a:	428c      	cmp	r4, r1
 800024c:	d06d      	beq.n	800032a <__aeabi_fadd+0x10a>
 800024e:	1bb8      	subs	r0, r7, r6
 8000250:	4681      	mov	r9, r0
 8000252:	2800      	cmp	r0, #0
 8000254:	dd4d      	ble.n	80002f2 <__aeabi_fadd+0xd2>
 8000256:	2e00      	cmp	r6, #0
 8000258:	d100      	bne.n	800025c <__aeabi_fadd+0x3c>
 800025a:	e088      	b.n	800036e <__aeabi_fadd+0x14e>
 800025c:	2fff      	cmp	r7, #255	; 0xff
 800025e:	d05a      	beq.n	8000316 <__aeabi_fadd+0xf6>
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	04db      	lsls	r3, r3, #19
 8000264:	431d      	orrs	r5, r3
 8000266:	464b      	mov	r3, r9
 8000268:	2201      	movs	r2, #1
 800026a:	2b1b      	cmp	r3, #27
 800026c:	dc0a      	bgt.n	8000284 <__aeabi_fadd+0x64>
 800026e:	002b      	movs	r3, r5
 8000270:	464a      	mov	r2, r9
 8000272:	4649      	mov	r1, r9
 8000274:	40d3      	lsrs	r3, r2
 8000276:	2220      	movs	r2, #32
 8000278:	1a52      	subs	r2, r2, r1
 800027a:	4095      	lsls	r5, r2
 800027c:	002a      	movs	r2, r5
 800027e:	1e55      	subs	r5, r2, #1
 8000280:	41aa      	sbcs	r2, r5
 8000282:	431a      	orrs	r2, r3
 8000284:	4653      	mov	r3, sl
 8000286:	1a9a      	subs	r2, r3, r2
 8000288:	0153      	lsls	r3, r2, #5
 800028a:	d400      	bmi.n	800028e <__aeabi_fadd+0x6e>
 800028c:	e0b9      	b.n	8000402 <__aeabi_fadd+0x1e2>
 800028e:	0192      	lsls	r2, r2, #6
 8000290:	0996      	lsrs	r6, r2, #6
 8000292:	0030      	movs	r0, r6
 8000294:	f000 fcd8 	bl	8000c48 <__clzsi2>
 8000298:	3805      	subs	r0, #5
 800029a:	4086      	lsls	r6, r0
 800029c:	4287      	cmp	r7, r0
 800029e:	dd00      	ble.n	80002a2 <__aeabi_fadd+0x82>
 80002a0:	e0d4      	b.n	800044c <__aeabi_fadd+0x22c>
 80002a2:	0033      	movs	r3, r6
 80002a4:	1bc7      	subs	r7, r0, r7
 80002a6:	2020      	movs	r0, #32
 80002a8:	3701      	adds	r7, #1
 80002aa:	40fb      	lsrs	r3, r7
 80002ac:	1bc7      	subs	r7, r0, r7
 80002ae:	40be      	lsls	r6, r7
 80002b0:	0032      	movs	r2, r6
 80002b2:	1e56      	subs	r6, r2, #1
 80002b4:	41b2      	sbcs	r2, r6
 80002b6:	2700      	movs	r7, #0
 80002b8:	431a      	orrs	r2, r3
 80002ba:	0753      	lsls	r3, r2, #29
 80002bc:	d004      	beq.n	80002c8 <__aeabi_fadd+0xa8>
 80002be:	230f      	movs	r3, #15
 80002c0:	4013      	ands	r3, r2
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d000      	beq.n	80002c8 <__aeabi_fadd+0xa8>
 80002c6:	3204      	adds	r2, #4
 80002c8:	0153      	lsls	r3, r2, #5
 80002ca:	d400      	bmi.n	80002ce <__aeabi_fadd+0xae>
 80002cc:	e09c      	b.n	8000408 <__aeabi_fadd+0x1e8>
 80002ce:	1c7b      	adds	r3, r7, #1
 80002d0:	2ffe      	cmp	r7, #254	; 0xfe
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0xb6>
 80002d4:	e09a      	b.n	800040c <__aeabi_fadd+0x1ec>
 80002d6:	0192      	lsls	r2, r2, #6
 80002d8:	0a52      	lsrs	r2, r2, #9
 80002da:	4694      	mov	ip, r2
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	05d8      	lsls	r0, r3, #23
 80002e0:	4663      	mov	r3, ip
 80002e2:	07e4      	lsls	r4, r4, #31
 80002e4:	4318      	orrs	r0, r3
 80002e6:	4320      	orrs	r0, r4
 80002e8:	bce0      	pop	{r5, r6, r7}
 80002ea:	46ba      	mov	sl, r7
 80002ec:	46b1      	mov	r9, r6
 80002ee:	46a8      	mov	r8, r5
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d049      	beq.n	800038a <__aeabi_fadd+0x16a>
 80002f6:	1bf3      	subs	r3, r6, r7
 80002f8:	2f00      	cmp	r7, #0
 80002fa:	d000      	beq.n	80002fe <__aeabi_fadd+0xde>
 80002fc:	e0b6      	b.n	800046c <__aeabi_fadd+0x24c>
 80002fe:	4652      	mov	r2, sl
 8000300:	2a00      	cmp	r2, #0
 8000302:	d060      	beq.n	80003c6 <__aeabi_fadd+0x1a6>
 8000304:	3b01      	subs	r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d100      	bne.n	800030c <__aeabi_fadd+0xec>
 800030a:	e0fc      	b.n	8000506 <__aeabi_fadd+0x2e6>
 800030c:	2eff      	cmp	r6, #255	; 0xff
 800030e:	d000      	beq.n	8000312 <__aeabi_fadd+0xf2>
 8000310:	e0b4      	b.n	800047c <__aeabi_fadd+0x25c>
 8000312:	000c      	movs	r4, r1
 8000314:	4642      	mov	r2, r8
 8000316:	2a00      	cmp	r2, #0
 8000318:	d078      	beq.n	800040c <__aeabi_fadd+0x1ec>
 800031a:	2080      	movs	r0, #128	; 0x80
 800031c:	03c0      	lsls	r0, r0, #15
 800031e:	4310      	orrs	r0, r2
 8000320:	0242      	lsls	r2, r0, #9
 8000322:	0a53      	lsrs	r3, r2, #9
 8000324:	469c      	mov	ip, r3
 8000326:	23ff      	movs	r3, #255	; 0xff
 8000328:	e7d9      	b.n	80002de <__aeabi_fadd+0xbe>
 800032a:	1bb9      	subs	r1, r7, r6
 800032c:	2900      	cmp	r1, #0
 800032e:	dd71      	ble.n	8000414 <__aeabi_fadd+0x1f4>
 8000330:	2e00      	cmp	r6, #0
 8000332:	d03f      	beq.n	80003b4 <__aeabi_fadd+0x194>
 8000334:	2fff      	cmp	r7, #255	; 0xff
 8000336:	d0ee      	beq.n	8000316 <__aeabi_fadd+0xf6>
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	04db      	lsls	r3, r3, #19
 800033c:	431d      	orrs	r5, r3
 800033e:	2201      	movs	r2, #1
 8000340:	291b      	cmp	r1, #27
 8000342:	dc07      	bgt.n	8000354 <__aeabi_fadd+0x134>
 8000344:	002a      	movs	r2, r5
 8000346:	2320      	movs	r3, #32
 8000348:	40ca      	lsrs	r2, r1
 800034a:	1a59      	subs	r1, r3, r1
 800034c:	408d      	lsls	r5, r1
 800034e:	1e6b      	subs	r3, r5, #1
 8000350:	419d      	sbcs	r5, r3
 8000352:	432a      	orrs	r2, r5
 8000354:	4452      	add	r2, sl
 8000356:	0153      	lsls	r3, r2, #5
 8000358:	d553      	bpl.n	8000402 <__aeabi_fadd+0x1e2>
 800035a:	3701      	adds	r7, #1
 800035c:	2fff      	cmp	r7, #255	; 0xff
 800035e:	d055      	beq.n	800040c <__aeabi_fadd+0x1ec>
 8000360:	2301      	movs	r3, #1
 8000362:	497b      	ldr	r1, [pc, #492]	; (8000550 <__aeabi_fadd+0x330>)
 8000364:	4013      	ands	r3, r2
 8000366:	0852      	lsrs	r2, r2, #1
 8000368:	400a      	ands	r2, r1
 800036a:	431a      	orrs	r2, r3
 800036c:	e7a5      	b.n	80002ba <__aeabi_fadd+0x9a>
 800036e:	2d00      	cmp	r5, #0
 8000370:	d02c      	beq.n	80003cc <__aeabi_fadd+0x1ac>
 8000372:	2301      	movs	r3, #1
 8000374:	425b      	negs	r3, r3
 8000376:	469c      	mov	ip, r3
 8000378:	44e1      	add	r9, ip
 800037a:	464b      	mov	r3, r9
 800037c:	2b00      	cmp	r3, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x162>
 8000380:	e0ad      	b.n	80004de <__aeabi_fadd+0x2be>
 8000382:	2fff      	cmp	r7, #255	; 0xff
 8000384:	d000      	beq.n	8000388 <__aeabi_fadd+0x168>
 8000386:	e76e      	b.n	8000266 <__aeabi_fadd+0x46>
 8000388:	e7c5      	b.n	8000316 <__aeabi_fadd+0xf6>
 800038a:	20fe      	movs	r0, #254	; 0xfe
 800038c:	1c7e      	adds	r6, r7, #1
 800038e:	4230      	tst	r0, r6
 8000390:	d160      	bne.n	8000454 <__aeabi_fadd+0x234>
 8000392:	2f00      	cmp	r7, #0
 8000394:	d000      	beq.n	8000398 <__aeabi_fadd+0x178>
 8000396:	e093      	b.n	80004c0 <__aeabi_fadd+0x2a0>
 8000398:	4652      	mov	r2, sl
 800039a:	2a00      	cmp	r2, #0
 800039c:	d100      	bne.n	80003a0 <__aeabi_fadd+0x180>
 800039e:	e0b6      	b.n	800050e <__aeabi_fadd+0x2ee>
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d09c      	beq.n	80002de <__aeabi_fadd+0xbe>
 80003a4:	1b52      	subs	r2, r2, r5
 80003a6:	0150      	lsls	r0, r2, #5
 80003a8:	d400      	bmi.n	80003ac <__aeabi_fadd+0x18c>
 80003aa:	e0c3      	b.n	8000534 <__aeabi_fadd+0x314>
 80003ac:	4653      	mov	r3, sl
 80003ae:	000c      	movs	r4, r1
 80003b0:	1aea      	subs	r2, r5, r3
 80003b2:	e782      	b.n	80002ba <__aeabi_fadd+0x9a>
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d009      	beq.n	80003cc <__aeabi_fadd+0x1ac>
 80003b8:	3901      	subs	r1, #1
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d100      	bne.n	80003c0 <__aeabi_fadd+0x1a0>
 80003be:	e08b      	b.n	80004d8 <__aeabi_fadd+0x2b8>
 80003c0:	2fff      	cmp	r7, #255	; 0xff
 80003c2:	d1bc      	bne.n	800033e <__aeabi_fadd+0x11e>
 80003c4:	e7a7      	b.n	8000316 <__aeabi_fadd+0xf6>
 80003c6:	000c      	movs	r4, r1
 80003c8:	4642      	mov	r2, r8
 80003ca:	0037      	movs	r7, r6
 80003cc:	2fff      	cmp	r7, #255	; 0xff
 80003ce:	d0a2      	beq.n	8000316 <__aeabi_fadd+0xf6>
 80003d0:	0252      	lsls	r2, r2, #9
 80003d2:	0a53      	lsrs	r3, r2, #9
 80003d4:	469c      	mov	ip, r3
 80003d6:	b2fb      	uxtb	r3, r7
 80003d8:	e781      	b.n	80002de <__aeabi_fadd+0xbe>
 80003da:	21fe      	movs	r1, #254	; 0xfe
 80003dc:	3701      	adds	r7, #1
 80003de:	4239      	tst	r1, r7
 80003e0:	d165      	bne.n	80004ae <__aeabi_fadd+0x28e>
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d17e      	bne.n	80004e4 <__aeabi_fadd+0x2c4>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	d100      	bne.n	80003ec <__aeabi_fadd+0x1cc>
 80003ea:	e0aa      	b.n	8000542 <__aeabi_fadd+0x322>
 80003ec:	2d00      	cmp	r5, #0
 80003ee:	d100      	bne.n	80003f2 <__aeabi_fadd+0x1d2>
 80003f0:	e775      	b.n	80002de <__aeabi_fadd+0xbe>
 80003f2:	002a      	movs	r2, r5
 80003f4:	4452      	add	r2, sl
 80003f6:	2700      	movs	r7, #0
 80003f8:	0153      	lsls	r3, r2, #5
 80003fa:	d502      	bpl.n	8000402 <__aeabi_fadd+0x1e2>
 80003fc:	4b55      	ldr	r3, [pc, #340]	; (8000554 <__aeabi_fadd+0x334>)
 80003fe:	3701      	adds	r7, #1
 8000400:	401a      	ands	r2, r3
 8000402:	0753      	lsls	r3, r2, #29
 8000404:	d000      	beq.n	8000408 <__aeabi_fadd+0x1e8>
 8000406:	e75a      	b.n	80002be <__aeabi_fadd+0x9e>
 8000408:	08d2      	lsrs	r2, r2, #3
 800040a:	e7df      	b.n	80003cc <__aeabi_fadd+0x1ac>
 800040c:	2200      	movs	r2, #0
 800040e:	23ff      	movs	r3, #255	; 0xff
 8000410:	4694      	mov	ip, r2
 8000412:	e764      	b.n	80002de <__aeabi_fadd+0xbe>
 8000414:	2900      	cmp	r1, #0
 8000416:	d0e0      	beq.n	80003da <__aeabi_fadd+0x1ba>
 8000418:	1bf3      	subs	r3, r6, r7
 800041a:	2f00      	cmp	r7, #0
 800041c:	d03e      	beq.n	800049c <__aeabi_fadd+0x27c>
 800041e:	2eff      	cmp	r6, #255	; 0xff
 8000420:	d100      	bne.n	8000424 <__aeabi_fadd+0x204>
 8000422:	e777      	b.n	8000314 <__aeabi_fadd+0xf4>
 8000424:	2280      	movs	r2, #128	; 0x80
 8000426:	0001      	movs	r1, r0
 8000428:	04d2      	lsls	r2, r2, #19
 800042a:	4311      	orrs	r1, r2
 800042c:	468a      	mov	sl, r1
 800042e:	2201      	movs	r2, #1
 8000430:	2b1b      	cmp	r3, #27
 8000432:	dc08      	bgt.n	8000446 <__aeabi_fadd+0x226>
 8000434:	4652      	mov	r2, sl
 8000436:	2120      	movs	r1, #32
 8000438:	4650      	mov	r0, sl
 800043a:	40da      	lsrs	r2, r3
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	4098      	lsls	r0, r3
 8000440:	1e43      	subs	r3, r0, #1
 8000442:	4198      	sbcs	r0, r3
 8000444:	4302      	orrs	r2, r0
 8000446:	0037      	movs	r7, r6
 8000448:	1952      	adds	r2, r2, r5
 800044a:	e784      	b.n	8000356 <__aeabi_fadd+0x136>
 800044c:	4a41      	ldr	r2, [pc, #260]	; (8000554 <__aeabi_fadd+0x334>)
 800044e:	1a3f      	subs	r7, r7, r0
 8000450:	4032      	ands	r2, r6
 8000452:	e732      	b.n	80002ba <__aeabi_fadd+0x9a>
 8000454:	4653      	mov	r3, sl
 8000456:	1b5e      	subs	r6, r3, r5
 8000458:	0173      	lsls	r3, r6, #5
 800045a:	d42d      	bmi.n	80004b8 <__aeabi_fadd+0x298>
 800045c:	2e00      	cmp	r6, #0
 800045e:	d000      	beq.n	8000462 <__aeabi_fadd+0x242>
 8000460:	e717      	b.n	8000292 <__aeabi_fadd+0x72>
 8000462:	2200      	movs	r2, #0
 8000464:	2400      	movs	r4, #0
 8000466:	2300      	movs	r3, #0
 8000468:	4694      	mov	ip, r2
 800046a:	e738      	b.n	80002de <__aeabi_fadd+0xbe>
 800046c:	2eff      	cmp	r6, #255	; 0xff
 800046e:	d100      	bne.n	8000472 <__aeabi_fadd+0x252>
 8000470:	e74f      	b.n	8000312 <__aeabi_fadd+0xf2>
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	4650      	mov	r0, sl
 8000476:	04d2      	lsls	r2, r2, #19
 8000478:	4310      	orrs	r0, r2
 800047a:	4682      	mov	sl, r0
 800047c:	2201      	movs	r2, #1
 800047e:	2b1b      	cmp	r3, #27
 8000480:	dc08      	bgt.n	8000494 <__aeabi_fadd+0x274>
 8000482:	4652      	mov	r2, sl
 8000484:	2420      	movs	r4, #32
 8000486:	4650      	mov	r0, sl
 8000488:	40da      	lsrs	r2, r3
 800048a:	1ae3      	subs	r3, r4, r3
 800048c:	4098      	lsls	r0, r3
 800048e:	1e43      	subs	r3, r0, #1
 8000490:	4198      	sbcs	r0, r3
 8000492:	4302      	orrs	r2, r0
 8000494:	000c      	movs	r4, r1
 8000496:	0037      	movs	r7, r6
 8000498:	1aaa      	subs	r2, r5, r2
 800049a:	e6f5      	b.n	8000288 <__aeabi_fadd+0x68>
 800049c:	2800      	cmp	r0, #0
 800049e:	d093      	beq.n	80003c8 <__aeabi_fadd+0x1a8>
 80004a0:	3b01      	subs	r3, #1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d04f      	beq.n	8000546 <__aeabi_fadd+0x326>
 80004a6:	2eff      	cmp	r6, #255	; 0xff
 80004a8:	d1c1      	bne.n	800042e <__aeabi_fadd+0x20e>
 80004aa:	4642      	mov	r2, r8
 80004ac:	e733      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004ae:	2fff      	cmp	r7, #255	; 0xff
 80004b0:	d0ac      	beq.n	800040c <__aeabi_fadd+0x1ec>
 80004b2:	4455      	add	r5, sl
 80004b4:	086a      	lsrs	r2, r5, #1
 80004b6:	e7a4      	b.n	8000402 <__aeabi_fadd+0x1e2>
 80004b8:	4653      	mov	r3, sl
 80004ba:	000c      	movs	r4, r1
 80004bc:	1aee      	subs	r6, r5, r3
 80004be:	e6e8      	b.n	8000292 <__aeabi_fadd+0x72>
 80004c0:	4653      	mov	r3, sl
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d128      	bne.n	8000518 <__aeabi_fadd+0x2f8>
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_fadd+0x2ac>
 80004ca:	e722      	b.n	8000312 <__aeabi_fadd+0xf2>
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	03db      	lsls	r3, r3, #15
 80004d0:	469c      	mov	ip, r3
 80004d2:	2400      	movs	r4, #0
 80004d4:	23ff      	movs	r3, #255	; 0xff
 80004d6:	e702      	b.n	80002de <__aeabi_fadd+0xbe>
 80004d8:	002a      	movs	r2, r5
 80004da:	4452      	add	r2, sl
 80004dc:	e73b      	b.n	8000356 <__aeabi_fadd+0x136>
 80004de:	4653      	mov	r3, sl
 80004e0:	1b5a      	subs	r2, r3, r5
 80004e2:	e6d1      	b.n	8000288 <__aeabi_fadd+0x68>
 80004e4:	2800      	cmp	r0, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x2ca>
 80004e8:	e714      	b.n	8000314 <__aeabi_fadd+0xf4>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x2d0>
 80004ee:	e712      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	03db      	lsls	r3, r3, #15
 80004f4:	421a      	tst	r2, r3
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x2da>
 80004f8:	e70d      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004fa:	4641      	mov	r1, r8
 80004fc:	4219      	tst	r1, r3
 80004fe:	d000      	beq.n	8000502 <__aeabi_fadd+0x2e2>
 8000500:	e709      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000502:	4642      	mov	r2, r8
 8000504:	e707      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000506:	000c      	movs	r4, r1
 8000508:	0037      	movs	r7, r6
 800050a:	1aaa      	subs	r2, r5, r2
 800050c:	e6bc      	b.n	8000288 <__aeabi_fadd+0x68>
 800050e:	2d00      	cmp	r5, #0
 8000510:	d013      	beq.n	800053a <__aeabi_fadd+0x31a>
 8000512:	000c      	movs	r4, r1
 8000514:	46c4      	mov	ip, r8
 8000516:	e6e2      	b.n	80002de <__aeabi_fadd+0xbe>
 8000518:	2d00      	cmp	r5, #0
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0x2fe>
 800051c:	e6fb      	b.n	8000316 <__aeabi_fadd+0xf6>
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	03db      	lsls	r3, r3, #15
 8000522:	421a      	tst	r2, r3
 8000524:	d100      	bne.n	8000528 <__aeabi_fadd+0x308>
 8000526:	e6f6      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000528:	4640      	mov	r0, r8
 800052a:	4218      	tst	r0, r3
 800052c:	d000      	beq.n	8000530 <__aeabi_fadd+0x310>
 800052e:	e6f2      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000530:	000c      	movs	r4, r1
 8000532:	e6ef      	b.n	8000314 <__aeabi_fadd+0xf4>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d000      	beq.n	800053a <__aeabi_fadd+0x31a>
 8000538:	e763      	b.n	8000402 <__aeabi_fadd+0x1e2>
 800053a:	2200      	movs	r2, #0
 800053c:	2400      	movs	r4, #0
 800053e:	4694      	mov	ip, r2
 8000540:	e6cd      	b.n	80002de <__aeabi_fadd+0xbe>
 8000542:	46c4      	mov	ip, r8
 8000544:	e6cb      	b.n	80002de <__aeabi_fadd+0xbe>
 8000546:	002a      	movs	r2, r5
 8000548:	0037      	movs	r7, r6
 800054a:	4452      	add	r2, sl
 800054c:	e703      	b.n	8000356 <__aeabi_fadd+0x136>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	7dffffff 	.word	0x7dffffff
 8000554:	fbffffff 	.word	0xfbffffff

08000558 <__aeabi_ui2f>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	1e05      	subs	r5, r0, #0
 800055c:	d00e      	beq.n	800057c <__aeabi_ui2f+0x24>
 800055e:	f000 fb73 	bl	8000c48 <__clzsi2>
 8000562:	239e      	movs	r3, #158	; 0x9e
 8000564:	0004      	movs	r4, r0
 8000566:	1a1b      	subs	r3, r3, r0
 8000568:	2b96      	cmp	r3, #150	; 0x96
 800056a:	dc0c      	bgt.n	8000586 <__aeabi_ui2f+0x2e>
 800056c:	2808      	cmp	r0, #8
 800056e:	dd01      	ble.n	8000574 <__aeabi_ui2f+0x1c>
 8000570:	3c08      	subs	r4, #8
 8000572:	40a5      	lsls	r5, r4
 8000574:	026d      	lsls	r5, r5, #9
 8000576:	0a6d      	lsrs	r5, r5, #9
 8000578:	b2d8      	uxtb	r0, r3
 800057a:	e001      	b.n	8000580 <__aeabi_ui2f+0x28>
 800057c:	2000      	movs	r0, #0
 800057e:	2500      	movs	r5, #0
 8000580:	05c0      	lsls	r0, r0, #23
 8000582:	4328      	orrs	r0, r5
 8000584:	bd70      	pop	{r4, r5, r6, pc}
 8000586:	2b99      	cmp	r3, #153	; 0x99
 8000588:	dd09      	ble.n	800059e <__aeabi_ui2f+0x46>
 800058a:	0002      	movs	r2, r0
 800058c:	0029      	movs	r1, r5
 800058e:	321b      	adds	r2, #27
 8000590:	4091      	lsls	r1, r2
 8000592:	1e4a      	subs	r2, r1, #1
 8000594:	4191      	sbcs	r1, r2
 8000596:	2205      	movs	r2, #5
 8000598:	1a12      	subs	r2, r2, r0
 800059a:	40d5      	lsrs	r5, r2
 800059c:	430d      	orrs	r5, r1
 800059e:	2c05      	cmp	r4, #5
 80005a0:	dd01      	ble.n	80005a6 <__aeabi_ui2f+0x4e>
 80005a2:	1f62      	subs	r2, r4, #5
 80005a4:	4095      	lsls	r5, r2
 80005a6:	0029      	movs	r1, r5
 80005a8:	4e08      	ldr	r6, [pc, #32]	; (80005cc <__aeabi_ui2f+0x74>)
 80005aa:	4031      	ands	r1, r6
 80005ac:	076a      	lsls	r2, r5, #29
 80005ae:	d009      	beq.n	80005c4 <__aeabi_ui2f+0x6c>
 80005b0:	200f      	movs	r0, #15
 80005b2:	4028      	ands	r0, r5
 80005b4:	2804      	cmp	r0, #4
 80005b6:	d005      	beq.n	80005c4 <__aeabi_ui2f+0x6c>
 80005b8:	3104      	adds	r1, #4
 80005ba:	014a      	lsls	r2, r1, #5
 80005bc:	d502      	bpl.n	80005c4 <__aeabi_ui2f+0x6c>
 80005be:	239f      	movs	r3, #159	; 0x9f
 80005c0:	4031      	ands	r1, r6
 80005c2:	1b1b      	subs	r3, r3, r4
 80005c4:	0189      	lsls	r1, r1, #6
 80005c6:	0a4d      	lsrs	r5, r1, #9
 80005c8:	b2d8      	uxtb	r0, r3
 80005ca:	e7d9      	b.n	8000580 <__aeabi_ui2f+0x28>
 80005cc:	fbffffff 	.word	0xfbffffff

080005d0 <__aeabi_dmul>:
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	4657      	mov	r7, sl
 80005d4:	464e      	mov	r6, r9
 80005d6:	4645      	mov	r5, r8
 80005d8:	46de      	mov	lr, fp
 80005da:	b5e0      	push	{r5, r6, r7, lr}
 80005dc:	4698      	mov	r8, r3
 80005de:	030c      	lsls	r4, r1, #12
 80005e0:	004b      	lsls	r3, r1, #1
 80005e2:	0006      	movs	r6, r0
 80005e4:	4692      	mov	sl, r2
 80005e6:	b087      	sub	sp, #28
 80005e8:	0b24      	lsrs	r4, r4, #12
 80005ea:	0d5b      	lsrs	r3, r3, #21
 80005ec:	0fcf      	lsrs	r7, r1, #31
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d06c      	beq.n	80006cc <__aeabi_dmul+0xfc>
 80005f2:	4add      	ldr	r2, [pc, #884]	; (8000968 <__aeabi_dmul+0x398>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d100      	bne.n	80005fa <__aeabi_dmul+0x2a>
 80005f8:	e086      	b.n	8000708 <__aeabi_dmul+0x138>
 80005fa:	0f42      	lsrs	r2, r0, #29
 80005fc:	00e4      	lsls	r4, r4, #3
 80005fe:	4314      	orrs	r4, r2
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	0412      	lsls	r2, r2, #16
 8000604:	4314      	orrs	r4, r2
 8000606:	4ad9      	ldr	r2, [pc, #868]	; (800096c <__aeabi_dmul+0x39c>)
 8000608:	00c5      	lsls	r5, r0, #3
 800060a:	4694      	mov	ip, r2
 800060c:	4463      	add	r3, ip
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	4699      	mov	r9, r3
 8000614:	469b      	mov	fp, r3
 8000616:	4643      	mov	r3, r8
 8000618:	4642      	mov	r2, r8
 800061a:	031e      	lsls	r6, r3, #12
 800061c:	0fd2      	lsrs	r2, r2, #31
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4650      	mov	r0, sl
 8000622:	4690      	mov	r8, r2
 8000624:	0b36      	lsrs	r6, r6, #12
 8000626:	0d5b      	lsrs	r3, r3, #21
 8000628:	d100      	bne.n	800062c <__aeabi_dmul+0x5c>
 800062a:	e078      	b.n	800071e <__aeabi_dmul+0x14e>
 800062c:	4ace      	ldr	r2, [pc, #824]	; (8000968 <__aeabi_dmul+0x398>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d01d      	beq.n	800066e <__aeabi_dmul+0x9e>
 8000632:	49ce      	ldr	r1, [pc, #824]	; (800096c <__aeabi_dmul+0x39c>)
 8000634:	0f42      	lsrs	r2, r0, #29
 8000636:	468c      	mov	ip, r1
 8000638:	9900      	ldr	r1, [sp, #0]
 800063a:	4463      	add	r3, ip
 800063c:	00f6      	lsls	r6, r6, #3
 800063e:	468c      	mov	ip, r1
 8000640:	4316      	orrs	r6, r2
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	449c      	add	ip, r3
 8000646:	0412      	lsls	r2, r2, #16
 8000648:	4663      	mov	r3, ip
 800064a:	4316      	orrs	r6, r2
 800064c:	00c2      	lsls	r2, r0, #3
 800064e:	2000      	movs	r0, #0
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	9900      	ldr	r1, [sp, #0]
 8000654:	4643      	mov	r3, r8
 8000656:	3101      	adds	r1, #1
 8000658:	468c      	mov	ip, r1
 800065a:	4649      	mov	r1, r9
 800065c:	407b      	eors	r3, r7
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	290f      	cmp	r1, #15
 8000662:	d900      	bls.n	8000666 <__aeabi_dmul+0x96>
 8000664:	e07e      	b.n	8000764 <__aeabi_dmul+0x194>
 8000666:	4bc2      	ldr	r3, [pc, #776]	; (8000970 <__aeabi_dmul+0x3a0>)
 8000668:	0089      	lsls	r1, r1, #2
 800066a:	5859      	ldr	r1, [r3, r1]
 800066c:	468f      	mov	pc, r1
 800066e:	4652      	mov	r2, sl
 8000670:	9b00      	ldr	r3, [sp, #0]
 8000672:	4332      	orrs	r2, r6
 8000674:	d000      	beq.n	8000678 <__aeabi_dmul+0xa8>
 8000676:	e156      	b.n	8000926 <__aeabi_dmul+0x356>
 8000678:	49bb      	ldr	r1, [pc, #748]	; (8000968 <__aeabi_dmul+0x398>)
 800067a:	2600      	movs	r6, #0
 800067c:	468c      	mov	ip, r1
 800067e:	4463      	add	r3, ip
 8000680:	4649      	mov	r1, r9
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2302      	movs	r3, #2
 8000686:	4319      	orrs	r1, r3
 8000688:	4689      	mov	r9, r1
 800068a:	2002      	movs	r0, #2
 800068c:	e7e1      	b.n	8000652 <__aeabi_dmul+0x82>
 800068e:	4643      	mov	r3, r8
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	0034      	movs	r4, r6
 8000694:	0015      	movs	r5, r2
 8000696:	4683      	mov	fp, r0
 8000698:	465b      	mov	r3, fp
 800069a:	2b02      	cmp	r3, #2
 800069c:	d05e      	beq.n	800075c <__aeabi_dmul+0x18c>
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dmul+0xd4>
 80006a2:	e1f3      	b.n	8000a8c <__aeabi_dmul+0x4bc>
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d000      	beq.n	80006aa <__aeabi_dmul+0xda>
 80006a8:	e118      	b.n	80008dc <__aeabi_dmul+0x30c>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2400      	movs	r4, #0
 80006ae:	2500      	movs	r5, #0
 80006b0:	9b01      	ldr	r3, [sp, #4]
 80006b2:	0512      	lsls	r2, r2, #20
 80006b4:	4322      	orrs	r2, r4
 80006b6:	07db      	lsls	r3, r3, #31
 80006b8:	431a      	orrs	r2, r3
 80006ba:	0028      	movs	r0, r5
 80006bc:	0011      	movs	r1, r2
 80006be:	b007      	add	sp, #28
 80006c0:	bcf0      	pop	{r4, r5, r6, r7}
 80006c2:	46bb      	mov	fp, r7
 80006c4:	46b2      	mov	sl, r6
 80006c6:	46a9      	mov	r9, r5
 80006c8:	46a0      	mov	r8, r4
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	0025      	movs	r5, r4
 80006ce:	4305      	orrs	r5, r0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dmul+0x104>
 80006d2:	e141      	b.n	8000958 <__aeabi_dmul+0x388>
 80006d4:	2c00      	cmp	r4, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_dmul+0x10a>
 80006d8:	e1ad      	b.n	8000a36 <__aeabi_dmul+0x466>
 80006da:	0020      	movs	r0, r4
 80006dc:	f000 fab4 	bl	8000c48 <__clzsi2>
 80006e0:	0001      	movs	r1, r0
 80006e2:	0002      	movs	r2, r0
 80006e4:	390b      	subs	r1, #11
 80006e6:	231d      	movs	r3, #29
 80006e8:	0010      	movs	r0, r2
 80006ea:	1a5b      	subs	r3, r3, r1
 80006ec:	0031      	movs	r1, r6
 80006ee:	0035      	movs	r5, r6
 80006f0:	3808      	subs	r0, #8
 80006f2:	4084      	lsls	r4, r0
 80006f4:	40d9      	lsrs	r1, r3
 80006f6:	4085      	lsls	r5, r0
 80006f8:	430c      	orrs	r4, r1
 80006fa:	489e      	ldr	r0, [pc, #632]	; (8000974 <__aeabi_dmul+0x3a4>)
 80006fc:	1a83      	subs	r3, r0, r2
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	4699      	mov	r9, r3
 8000704:	469b      	mov	fp, r3
 8000706:	e786      	b.n	8000616 <__aeabi_dmul+0x46>
 8000708:	0005      	movs	r5, r0
 800070a:	4325      	orrs	r5, r4
 800070c:	d000      	beq.n	8000710 <__aeabi_dmul+0x140>
 800070e:	e11c      	b.n	800094a <__aeabi_dmul+0x37a>
 8000710:	2208      	movs	r2, #8
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2302      	movs	r3, #2
 8000716:	2400      	movs	r4, #0
 8000718:	4691      	mov	r9, r2
 800071a:	469b      	mov	fp, r3
 800071c:	e77b      	b.n	8000616 <__aeabi_dmul+0x46>
 800071e:	4652      	mov	r2, sl
 8000720:	4332      	orrs	r2, r6
 8000722:	d100      	bne.n	8000726 <__aeabi_dmul+0x156>
 8000724:	e10a      	b.n	800093c <__aeabi_dmul+0x36c>
 8000726:	2e00      	cmp	r6, #0
 8000728:	d100      	bne.n	800072c <__aeabi_dmul+0x15c>
 800072a:	e176      	b.n	8000a1a <__aeabi_dmul+0x44a>
 800072c:	0030      	movs	r0, r6
 800072e:	f000 fa8b 	bl	8000c48 <__clzsi2>
 8000732:	0002      	movs	r2, r0
 8000734:	3a0b      	subs	r2, #11
 8000736:	231d      	movs	r3, #29
 8000738:	0001      	movs	r1, r0
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	4652      	mov	r2, sl
 800073e:	3908      	subs	r1, #8
 8000740:	40da      	lsrs	r2, r3
 8000742:	408e      	lsls	r6, r1
 8000744:	4316      	orrs	r6, r2
 8000746:	4652      	mov	r2, sl
 8000748:	408a      	lsls	r2, r1
 800074a:	9b00      	ldr	r3, [sp, #0]
 800074c:	4989      	ldr	r1, [pc, #548]	; (8000974 <__aeabi_dmul+0x3a4>)
 800074e:	1a18      	subs	r0, r3, r0
 8000750:	0003      	movs	r3, r0
 8000752:	468c      	mov	ip, r1
 8000754:	4463      	add	r3, ip
 8000756:	2000      	movs	r0, #0
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	e77a      	b.n	8000652 <__aeabi_dmul+0x82>
 800075c:	2400      	movs	r4, #0
 800075e:	2500      	movs	r5, #0
 8000760:	4a81      	ldr	r2, [pc, #516]	; (8000968 <__aeabi_dmul+0x398>)
 8000762:	e7a5      	b.n	80006b0 <__aeabi_dmul+0xe0>
 8000764:	0c2f      	lsrs	r7, r5, #16
 8000766:	042d      	lsls	r5, r5, #16
 8000768:	0c2d      	lsrs	r5, r5, #16
 800076a:	002b      	movs	r3, r5
 800076c:	0c11      	lsrs	r1, r2, #16
 800076e:	0412      	lsls	r2, r2, #16
 8000770:	0c12      	lsrs	r2, r2, #16
 8000772:	4353      	muls	r3, r2
 8000774:	4698      	mov	r8, r3
 8000776:	0013      	movs	r3, r2
 8000778:	0028      	movs	r0, r5
 800077a:	437b      	muls	r3, r7
 800077c:	4699      	mov	r9, r3
 800077e:	4348      	muls	r0, r1
 8000780:	4448      	add	r0, r9
 8000782:	4683      	mov	fp, r0
 8000784:	4640      	mov	r0, r8
 8000786:	000b      	movs	r3, r1
 8000788:	0c00      	lsrs	r0, r0, #16
 800078a:	4682      	mov	sl, r0
 800078c:	4658      	mov	r0, fp
 800078e:	437b      	muls	r3, r7
 8000790:	4450      	add	r0, sl
 8000792:	9302      	str	r3, [sp, #8]
 8000794:	4581      	cmp	r9, r0
 8000796:	d906      	bls.n	80007a6 <__aeabi_dmul+0x1d6>
 8000798:	469a      	mov	sl, r3
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	025b      	lsls	r3, r3, #9
 800079e:	4699      	mov	r9, r3
 80007a0:	44ca      	add	sl, r9
 80007a2:	4653      	mov	r3, sl
 80007a4:	9302      	str	r3, [sp, #8]
 80007a6:	0c03      	lsrs	r3, r0, #16
 80007a8:	469b      	mov	fp, r3
 80007aa:	4643      	mov	r3, r8
 80007ac:	041b      	lsls	r3, r3, #16
 80007ae:	0400      	lsls	r0, r0, #16
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	4698      	mov	r8, r3
 80007b4:	0003      	movs	r3, r0
 80007b6:	4443      	add	r3, r8
 80007b8:	9304      	str	r3, [sp, #16]
 80007ba:	0c33      	lsrs	r3, r6, #16
 80007bc:	4699      	mov	r9, r3
 80007be:	002b      	movs	r3, r5
 80007c0:	0436      	lsls	r6, r6, #16
 80007c2:	0c36      	lsrs	r6, r6, #16
 80007c4:	4373      	muls	r3, r6
 80007c6:	4698      	mov	r8, r3
 80007c8:	0033      	movs	r3, r6
 80007ca:	437b      	muls	r3, r7
 80007cc:	469a      	mov	sl, r3
 80007ce:	464b      	mov	r3, r9
 80007d0:	435d      	muls	r5, r3
 80007d2:	435f      	muls	r7, r3
 80007d4:	4643      	mov	r3, r8
 80007d6:	4455      	add	r5, sl
 80007d8:	0c18      	lsrs	r0, r3, #16
 80007da:	1940      	adds	r0, r0, r5
 80007dc:	4582      	cmp	sl, r0
 80007de:	d903      	bls.n	80007e8 <__aeabi_dmul+0x218>
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	025b      	lsls	r3, r3, #9
 80007e4:	469a      	mov	sl, r3
 80007e6:	4457      	add	r7, sl
 80007e8:	0c05      	lsrs	r5, r0, #16
 80007ea:	19eb      	adds	r3, r5, r7
 80007ec:	9305      	str	r3, [sp, #20]
 80007ee:	4643      	mov	r3, r8
 80007f0:	041d      	lsls	r5, r3, #16
 80007f2:	0c2d      	lsrs	r5, r5, #16
 80007f4:	0400      	lsls	r0, r0, #16
 80007f6:	1940      	adds	r0, r0, r5
 80007f8:	0c25      	lsrs	r5, r4, #16
 80007fa:	0424      	lsls	r4, r4, #16
 80007fc:	0c24      	lsrs	r4, r4, #16
 80007fe:	0027      	movs	r7, r4
 8000800:	4357      	muls	r7, r2
 8000802:	436a      	muls	r2, r5
 8000804:	4690      	mov	r8, r2
 8000806:	002a      	movs	r2, r5
 8000808:	0c3b      	lsrs	r3, r7, #16
 800080a:	469a      	mov	sl, r3
 800080c:	434a      	muls	r2, r1
 800080e:	4361      	muls	r1, r4
 8000810:	4441      	add	r1, r8
 8000812:	4451      	add	r1, sl
 8000814:	4483      	add	fp, r0
 8000816:	4588      	cmp	r8, r1
 8000818:	d903      	bls.n	8000822 <__aeabi_dmul+0x252>
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	025b      	lsls	r3, r3, #9
 800081e:	4698      	mov	r8, r3
 8000820:	4442      	add	r2, r8
 8000822:	043f      	lsls	r7, r7, #16
 8000824:	0c0b      	lsrs	r3, r1, #16
 8000826:	0c3f      	lsrs	r7, r7, #16
 8000828:	0409      	lsls	r1, r1, #16
 800082a:	19c9      	adds	r1, r1, r7
 800082c:	0027      	movs	r7, r4
 800082e:	4698      	mov	r8, r3
 8000830:	464b      	mov	r3, r9
 8000832:	4377      	muls	r7, r6
 8000834:	435c      	muls	r4, r3
 8000836:	436e      	muls	r6, r5
 8000838:	435d      	muls	r5, r3
 800083a:	0c3b      	lsrs	r3, r7, #16
 800083c:	4699      	mov	r9, r3
 800083e:	19a4      	adds	r4, r4, r6
 8000840:	444c      	add	r4, r9
 8000842:	4442      	add	r2, r8
 8000844:	9503      	str	r5, [sp, #12]
 8000846:	42a6      	cmp	r6, r4
 8000848:	d904      	bls.n	8000854 <__aeabi_dmul+0x284>
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	025b      	lsls	r3, r3, #9
 800084e:	4698      	mov	r8, r3
 8000850:	4445      	add	r5, r8
 8000852:	9503      	str	r5, [sp, #12]
 8000854:	9b02      	ldr	r3, [sp, #8]
 8000856:	043f      	lsls	r7, r7, #16
 8000858:	445b      	add	r3, fp
 800085a:	001e      	movs	r6, r3
 800085c:	4283      	cmp	r3, r0
 800085e:	4180      	sbcs	r0, r0
 8000860:	0423      	lsls	r3, r4, #16
 8000862:	4698      	mov	r8, r3
 8000864:	9b05      	ldr	r3, [sp, #20]
 8000866:	0c3f      	lsrs	r7, r7, #16
 8000868:	4447      	add	r7, r8
 800086a:	4698      	mov	r8, r3
 800086c:	1876      	adds	r6, r6, r1
 800086e:	428e      	cmp	r6, r1
 8000870:	4189      	sbcs	r1, r1
 8000872:	4447      	add	r7, r8
 8000874:	4240      	negs	r0, r0
 8000876:	183d      	adds	r5, r7, r0
 8000878:	46a8      	mov	r8, r5
 800087a:	4693      	mov	fp, r2
 800087c:	4249      	negs	r1, r1
 800087e:	468a      	mov	sl, r1
 8000880:	44c3      	add	fp, r8
 8000882:	429f      	cmp	r7, r3
 8000884:	41bf      	sbcs	r7, r7
 8000886:	4580      	cmp	r8, r0
 8000888:	4180      	sbcs	r0, r0
 800088a:	9b03      	ldr	r3, [sp, #12]
 800088c:	44da      	add	sl, fp
 800088e:	4698      	mov	r8, r3
 8000890:	4653      	mov	r3, sl
 8000892:	4240      	negs	r0, r0
 8000894:	427f      	negs	r7, r7
 8000896:	4307      	orrs	r7, r0
 8000898:	0c24      	lsrs	r4, r4, #16
 800089a:	4593      	cmp	fp, r2
 800089c:	4192      	sbcs	r2, r2
 800089e:	458a      	cmp	sl, r1
 80008a0:	4189      	sbcs	r1, r1
 80008a2:	193f      	adds	r7, r7, r4
 80008a4:	0ddc      	lsrs	r4, r3, #23
 80008a6:	9b04      	ldr	r3, [sp, #16]
 80008a8:	0275      	lsls	r5, r6, #9
 80008aa:	431d      	orrs	r5, r3
 80008ac:	1e68      	subs	r0, r5, #1
 80008ae:	4185      	sbcs	r5, r0
 80008b0:	4653      	mov	r3, sl
 80008b2:	4252      	negs	r2, r2
 80008b4:	4249      	negs	r1, r1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	18bf      	adds	r7, r7, r2
 80008ba:	4447      	add	r7, r8
 80008bc:	0df6      	lsrs	r6, r6, #23
 80008be:	027f      	lsls	r7, r7, #9
 80008c0:	4335      	orrs	r5, r6
 80008c2:	025a      	lsls	r2, r3, #9
 80008c4:	433c      	orrs	r4, r7
 80008c6:	4315      	orrs	r5, r2
 80008c8:	01fb      	lsls	r3, r7, #7
 80008ca:	d400      	bmi.n	80008ce <__aeabi_dmul+0x2fe>
 80008cc:	e0c1      	b.n	8000a52 <__aeabi_dmul+0x482>
 80008ce:	2101      	movs	r1, #1
 80008d0:	086a      	lsrs	r2, r5, #1
 80008d2:	400d      	ands	r5, r1
 80008d4:	4315      	orrs	r5, r2
 80008d6:	07e2      	lsls	r2, r4, #31
 80008d8:	4315      	orrs	r5, r2
 80008da:	0864      	lsrs	r4, r4, #1
 80008dc:	4926      	ldr	r1, [pc, #152]	; (8000978 <__aeabi_dmul+0x3a8>)
 80008de:	4461      	add	r1, ip
 80008e0:	2900      	cmp	r1, #0
 80008e2:	dd56      	ble.n	8000992 <__aeabi_dmul+0x3c2>
 80008e4:	076b      	lsls	r3, r5, #29
 80008e6:	d009      	beq.n	80008fc <__aeabi_dmul+0x32c>
 80008e8:	220f      	movs	r2, #15
 80008ea:	402a      	ands	r2, r5
 80008ec:	2a04      	cmp	r2, #4
 80008ee:	d005      	beq.n	80008fc <__aeabi_dmul+0x32c>
 80008f0:	1d2a      	adds	r2, r5, #4
 80008f2:	42aa      	cmp	r2, r5
 80008f4:	41ad      	sbcs	r5, r5
 80008f6:	426d      	negs	r5, r5
 80008f8:	1964      	adds	r4, r4, r5
 80008fa:	0015      	movs	r5, r2
 80008fc:	01e3      	lsls	r3, r4, #7
 80008fe:	d504      	bpl.n	800090a <__aeabi_dmul+0x33a>
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <__aeabi_dmul+0x3ac>)
 8000904:	00c9      	lsls	r1, r1, #3
 8000906:	4014      	ands	r4, r2
 8000908:	4461      	add	r1, ip
 800090a:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <__aeabi_dmul+0x3b0>)
 800090c:	4291      	cmp	r1, r2
 800090e:	dd00      	ble.n	8000912 <__aeabi_dmul+0x342>
 8000910:	e724      	b.n	800075c <__aeabi_dmul+0x18c>
 8000912:	0762      	lsls	r2, r4, #29
 8000914:	08ed      	lsrs	r5, r5, #3
 8000916:	0264      	lsls	r4, r4, #9
 8000918:	0549      	lsls	r1, r1, #21
 800091a:	4315      	orrs	r5, r2
 800091c:	0b24      	lsrs	r4, r4, #12
 800091e:	0d4a      	lsrs	r2, r1, #21
 8000920:	e6c6      	b.n	80006b0 <__aeabi_dmul+0xe0>
 8000922:	9701      	str	r7, [sp, #4]
 8000924:	e6b8      	b.n	8000698 <__aeabi_dmul+0xc8>
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <__aeabi_dmul+0x398>)
 8000928:	2003      	movs	r0, #3
 800092a:	4694      	mov	ip, r2
 800092c:	4463      	add	r3, ip
 800092e:	464a      	mov	r2, r9
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2303      	movs	r3, #3
 8000934:	431a      	orrs	r2, r3
 8000936:	4691      	mov	r9, r2
 8000938:	4652      	mov	r2, sl
 800093a:	e68a      	b.n	8000652 <__aeabi_dmul+0x82>
 800093c:	4649      	mov	r1, r9
 800093e:	2301      	movs	r3, #1
 8000940:	4319      	orrs	r1, r3
 8000942:	4689      	mov	r9, r1
 8000944:	2600      	movs	r6, #0
 8000946:	2001      	movs	r0, #1
 8000948:	e683      	b.n	8000652 <__aeabi_dmul+0x82>
 800094a:	220c      	movs	r2, #12
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2303      	movs	r3, #3
 8000950:	0005      	movs	r5, r0
 8000952:	4691      	mov	r9, r2
 8000954:	469b      	mov	fp, r3
 8000956:	e65e      	b.n	8000616 <__aeabi_dmul+0x46>
 8000958:	2304      	movs	r3, #4
 800095a:	4699      	mov	r9, r3
 800095c:	2300      	movs	r3, #0
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	2400      	movs	r4, #0
 8000964:	469b      	mov	fp, r3
 8000966:	e656      	b.n	8000616 <__aeabi_dmul+0x46>
 8000968:	000007ff 	.word	0x000007ff
 800096c:	fffffc01 	.word	0xfffffc01
 8000970:	08002dd4 	.word	0x08002dd4
 8000974:	fffffc0d 	.word	0xfffffc0d
 8000978:	000003ff 	.word	0x000003ff
 800097c:	feffffff 	.word	0xfeffffff
 8000980:	000007fe 	.word	0x000007fe
 8000984:	2300      	movs	r3, #0
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2500      	movs	r5, #0
 800098a:	4a44      	ldr	r2, [pc, #272]	; (8000a9c <__aeabi_dmul+0x4cc>)
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	0324      	lsls	r4, r4, #12
 8000990:	e68e      	b.n	80006b0 <__aeabi_dmul+0xe0>
 8000992:	2001      	movs	r0, #1
 8000994:	1a40      	subs	r0, r0, r1
 8000996:	2838      	cmp	r0, #56	; 0x38
 8000998:	dd00      	ble.n	800099c <__aeabi_dmul+0x3cc>
 800099a:	e686      	b.n	80006aa <__aeabi_dmul+0xda>
 800099c:	281f      	cmp	r0, #31
 800099e:	dd5b      	ble.n	8000a58 <__aeabi_dmul+0x488>
 80009a0:	221f      	movs	r2, #31
 80009a2:	0023      	movs	r3, r4
 80009a4:	4252      	negs	r2, r2
 80009a6:	1a51      	subs	r1, r2, r1
 80009a8:	40cb      	lsrs	r3, r1
 80009aa:	0019      	movs	r1, r3
 80009ac:	2820      	cmp	r0, #32
 80009ae:	d003      	beq.n	80009b8 <__aeabi_dmul+0x3e8>
 80009b0:	4a3b      	ldr	r2, [pc, #236]	; (8000aa0 <__aeabi_dmul+0x4d0>)
 80009b2:	4462      	add	r2, ip
 80009b4:	4094      	lsls	r4, r2
 80009b6:	4325      	orrs	r5, r4
 80009b8:	1e6a      	subs	r2, r5, #1
 80009ba:	4195      	sbcs	r5, r2
 80009bc:	002a      	movs	r2, r5
 80009be:	430a      	orrs	r2, r1
 80009c0:	2107      	movs	r1, #7
 80009c2:	000d      	movs	r5, r1
 80009c4:	2400      	movs	r4, #0
 80009c6:	4015      	ands	r5, r2
 80009c8:	4211      	tst	r1, r2
 80009ca:	d05b      	beq.n	8000a84 <__aeabi_dmul+0x4b4>
 80009cc:	210f      	movs	r1, #15
 80009ce:	2400      	movs	r4, #0
 80009d0:	4011      	ands	r1, r2
 80009d2:	2904      	cmp	r1, #4
 80009d4:	d053      	beq.n	8000a7e <__aeabi_dmul+0x4ae>
 80009d6:	1d11      	adds	r1, r2, #4
 80009d8:	4291      	cmp	r1, r2
 80009da:	4192      	sbcs	r2, r2
 80009dc:	4252      	negs	r2, r2
 80009de:	18a4      	adds	r4, r4, r2
 80009e0:	000a      	movs	r2, r1
 80009e2:	0223      	lsls	r3, r4, #8
 80009e4:	d54b      	bpl.n	8000a7e <__aeabi_dmul+0x4ae>
 80009e6:	2201      	movs	r2, #1
 80009e8:	2400      	movs	r4, #0
 80009ea:	2500      	movs	r5, #0
 80009ec:	e660      	b.n	80006b0 <__aeabi_dmul+0xe0>
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	031b      	lsls	r3, r3, #12
 80009f2:	421c      	tst	r4, r3
 80009f4:	d009      	beq.n	8000a0a <__aeabi_dmul+0x43a>
 80009f6:	421e      	tst	r6, r3
 80009f8:	d107      	bne.n	8000a0a <__aeabi_dmul+0x43a>
 80009fa:	4333      	orrs	r3, r6
 80009fc:	031c      	lsls	r4, r3, #12
 80009fe:	4643      	mov	r3, r8
 8000a00:	0015      	movs	r5, r2
 8000a02:	0b24      	lsrs	r4, r4, #12
 8000a04:	4a25      	ldr	r2, [pc, #148]	; (8000a9c <__aeabi_dmul+0x4cc>)
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	e652      	b.n	80006b0 <__aeabi_dmul+0xe0>
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	0312      	lsls	r2, r2, #12
 8000a0e:	4314      	orrs	r4, r2
 8000a10:	0324      	lsls	r4, r4, #12
 8000a12:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <__aeabi_dmul+0x4cc>)
 8000a14:	0b24      	lsrs	r4, r4, #12
 8000a16:	9701      	str	r7, [sp, #4]
 8000a18:	e64a      	b.n	80006b0 <__aeabi_dmul+0xe0>
 8000a1a:	f000 f915 	bl	8000c48 <__clzsi2>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	001a      	movs	r2, r3
 8000a22:	3215      	adds	r2, #21
 8000a24:	3020      	adds	r0, #32
 8000a26:	2a1c      	cmp	r2, #28
 8000a28:	dc00      	bgt.n	8000a2c <__aeabi_dmul+0x45c>
 8000a2a:	e684      	b.n	8000736 <__aeabi_dmul+0x166>
 8000a2c:	4656      	mov	r6, sl
 8000a2e:	3b08      	subs	r3, #8
 8000a30:	2200      	movs	r2, #0
 8000a32:	409e      	lsls	r6, r3
 8000a34:	e689      	b.n	800074a <__aeabi_dmul+0x17a>
 8000a36:	f000 f907 	bl	8000c48 <__clzsi2>
 8000a3a:	0001      	movs	r1, r0
 8000a3c:	0002      	movs	r2, r0
 8000a3e:	3115      	adds	r1, #21
 8000a40:	3220      	adds	r2, #32
 8000a42:	291c      	cmp	r1, #28
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_dmul+0x478>
 8000a46:	e64e      	b.n	80006e6 <__aeabi_dmul+0x116>
 8000a48:	0034      	movs	r4, r6
 8000a4a:	3808      	subs	r0, #8
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	4084      	lsls	r4, r0
 8000a50:	e653      	b.n	80006fa <__aeabi_dmul+0x12a>
 8000a52:	9b00      	ldr	r3, [sp, #0]
 8000a54:	469c      	mov	ip, r3
 8000a56:	e741      	b.n	80008dc <__aeabi_dmul+0x30c>
 8000a58:	4912      	ldr	r1, [pc, #72]	; (8000aa4 <__aeabi_dmul+0x4d4>)
 8000a5a:	0022      	movs	r2, r4
 8000a5c:	4461      	add	r1, ip
 8000a5e:	002e      	movs	r6, r5
 8000a60:	408d      	lsls	r5, r1
 8000a62:	408a      	lsls	r2, r1
 8000a64:	40c6      	lsrs	r6, r0
 8000a66:	1e69      	subs	r1, r5, #1
 8000a68:	418d      	sbcs	r5, r1
 8000a6a:	4332      	orrs	r2, r6
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	40c4      	lsrs	r4, r0
 8000a70:	0753      	lsls	r3, r2, #29
 8000a72:	d0b6      	beq.n	80009e2 <__aeabi_dmul+0x412>
 8000a74:	210f      	movs	r1, #15
 8000a76:	4011      	ands	r1, r2
 8000a78:	2904      	cmp	r1, #4
 8000a7a:	d1ac      	bne.n	80009d6 <__aeabi_dmul+0x406>
 8000a7c:	e7b1      	b.n	80009e2 <__aeabi_dmul+0x412>
 8000a7e:	0765      	lsls	r5, r4, #29
 8000a80:	0264      	lsls	r4, r4, #9
 8000a82:	0b24      	lsrs	r4, r4, #12
 8000a84:	08d2      	lsrs	r2, r2, #3
 8000a86:	4315      	orrs	r5, r2
 8000a88:	2200      	movs	r2, #0
 8000a8a:	e611      	b.n	80006b0 <__aeabi_dmul+0xe0>
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	0312      	lsls	r2, r2, #12
 8000a90:	4314      	orrs	r4, r2
 8000a92:	0324      	lsls	r4, r4, #12
 8000a94:	4a01      	ldr	r2, [pc, #4]	; (8000a9c <__aeabi_dmul+0x4cc>)
 8000a96:	0b24      	lsrs	r4, r4, #12
 8000a98:	e60a      	b.n	80006b0 <__aeabi_dmul+0xe0>
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	000007ff 	.word	0x000007ff
 8000aa0:	0000043e 	.word	0x0000043e
 8000aa4:	0000041e 	.word	0x0000041e

08000aa8 <__aeabi_f2d>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	0043      	lsls	r3, r0, #1
 8000aac:	0246      	lsls	r6, r0, #9
 8000aae:	0fc4      	lsrs	r4, r0, #31
 8000ab0:	20fe      	movs	r0, #254	; 0xfe
 8000ab2:	0e1b      	lsrs	r3, r3, #24
 8000ab4:	1c59      	adds	r1, r3, #1
 8000ab6:	0a75      	lsrs	r5, r6, #9
 8000ab8:	4208      	tst	r0, r1
 8000aba:	d00c      	beq.n	8000ad6 <__aeabi_f2d+0x2e>
 8000abc:	22e0      	movs	r2, #224	; 0xe0
 8000abe:	0092      	lsls	r2, r2, #2
 8000ac0:	4694      	mov	ip, r2
 8000ac2:	076d      	lsls	r5, r5, #29
 8000ac4:	0b36      	lsrs	r6, r6, #12
 8000ac6:	4463      	add	r3, ip
 8000ac8:	051b      	lsls	r3, r3, #20
 8000aca:	4333      	orrs	r3, r6
 8000acc:	07e4      	lsls	r4, r4, #31
 8000ace:	4323      	orrs	r3, r4
 8000ad0:	0028      	movs	r0, r5
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d114      	bne.n	8000b04 <__aeabi_f2d+0x5c>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d01b      	beq.n	8000b16 <__aeabi_f2d+0x6e>
 8000ade:	0028      	movs	r0, r5
 8000ae0:	f000 f8b2 	bl	8000c48 <__clzsi2>
 8000ae4:	280a      	cmp	r0, #10
 8000ae6:	dc1c      	bgt.n	8000b22 <__aeabi_f2d+0x7a>
 8000ae8:	230b      	movs	r3, #11
 8000aea:	002a      	movs	r2, r5
 8000aec:	1a1b      	subs	r3, r3, r0
 8000aee:	40da      	lsrs	r2, r3
 8000af0:	0003      	movs	r3, r0
 8000af2:	3315      	adds	r3, #21
 8000af4:	409d      	lsls	r5, r3
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <__aeabi_f2d+0x88>)
 8000af8:	0312      	lsls	r2, r2, #12
 8000afa:	1a1b      	subs	r3, r3, r0
 8000afc:	055b      	lsls	r3, r3, #21
 8000afe:	0b16      	lsrs	r6, r2, #12
 8000b00:	0d5b      	lsrs	r3, r3, #21
 8000b02:	e7e1      	b.n	8000ac8 <__aeabi_f2d+0x20>
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d009      	beq.n	8000b1c <__aeabi_f2d+0x74>
 8000b08:	0b32      	lsrs	r2, r6, #12
 8000b0a:	2680      	movs	r6, #128	; 0x80
 8000b0c:	0336      	lsls	r6, r6, #12
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <__aeabi_f2d+0x8c>)
 8000b10:	076d      	lsls	r5, r5, #29
 8000b12:	4316      	orrs	r6, r2
 8000b14:	e7d8      	b.n	8000ac8 <__aeabi_f2d+0x20>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2600      	movs	r6, #0
 8000b1a:	e7d5      	b.n	8000ac8 <__aeabi_f2d+0x20>
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <__aeabi_f2d+0x8c>)
 8000b20:	e7d2      	b.n	8000ac8 <__aeabi_f2d+0x20>
 8000b22:	0003      	movs	r3, r0
 8000b24:	002a      	movs	r2, r5
 8000b26:	3b0b      	subs	r3, #11
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	e7e3      	b.n	8000af6 <__aeabi_f2d+0x4e>
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	00000389 	.word	0x00000389
 8000b34:	000007ff 	.word	0x000007ff

08000b38 <__aeabi_d2f>:
 8000b38:	0002      	movs	r2, r0
 8000b3a:	004b      	lsls	r3, r1, #1
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	0308      	lsls	r0, r1, #12
 8000b40:	0d5b      	lsrs	r3, r3, #21
 8000b42:	4e3d      	ldr	r6, [pc, #244]	; (8000c38 <__aeabi_d2f+0x100>)
 8000b44:	0fcc      	lsrs	r4, r1, #31
 8000b46:	0a40      	lsrs	r0, r0, #9
 8000b48:	0f51      	lsrs	r1, r2, #29
 8000b4a:	1c5f      	adds	r7, r3, #1
 8000b4c:	4308      	orrs	r0, r1
 8000b4e:	00d5      	lsls	r5, r2, #3
 8000b50:	4237      	tst	r7, r6
 8000b52:	d00a      	beq.n	8000b6a <__aeabi_d2f+0x32>
 8000b54:	4939      	ldr	r1, [pc, #228]	; (8000c3c <__aeabi_d2f+0x104>)
 8000b56:	185e      	adds	r6, r3, r1
 8000b58:	2efe      	cmp	r6, #254	; 0xfe
 8000b5a:	dd16      	ble.n	8000b8a <__aeabi_d2f+0x52>
 8000b5c:	23ff      	movs	r3, #255	; 0xff
 8000b5e:	2100      	movs	r1, #0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	430b      	orrs	r3, r1
 8000b64:	07e0      	lsls	r0, r4, #31
 8000b66:	4318      	orrs	r0, r3
 8000b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d106      	bne.n	8000b7c <__aeabi_d2f+0x44>
 8000b6e:	4328      	orrs	r0, r5
 8000b70:	d027      	beq.n	8000bc2 <__aeabi_d2f+0x8a>
 8000b72:	2105      	movs	r1, #5
 8000b74:	0189      	lsls	r1, r1, #6
 8000b76:	0a49      	lsrs	r1, r1, #9
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	e7f1      	b.n	8000b60 <__aeabi_d2f+0x28>
 8000b7c:	4305      	orrs	r5, r0
 8000b7e:	d0ed      	beq.n	8000b5c <__aeabi_d2f+0x24>
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	03c9      	lsls	r1, r1, #15
 8000b84:	23ff      	movs	r3, #255	; 0xff
 8000b86:	4301      	orrs	r1, r0
 8000b88:	e7ea      	b.n	8000b60 <__aeabi_d2f+0x28>
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	dd1c      	ble.n	8000bc8 <__aeabi_d2f+0x90>
 8000b8e:	0192      	lsls	r2, r2, #6
 8000b90:	0011      	movs	r1, r2
 8000b92:	1e4a      	subs	r2, r1, #1
 8000b94:	4191      	sbcs	r1, r2
 8000b96:	00c0      	lsls	r0, r0, #3
 8000b98:	0f6d      	lsrs	r5, r5, #29
 8000b9a:	4301      	orrs	r1, r0
 8000b9c:	4329      	orrs	r1, r5
 8000b9e:	074b      	lsls	r3, r1, #29
 8000ba0:	d048      	beq.n	8000c34 <__aeabi_d2f+0xfc>
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d000      	beq.n	8000bac <__aeabi_d2f+0x74>
 8000baa:	3104      	adds	r1, #4
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	04db      	lsls	r3, r3, #19
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	d03f      	beq.n	8000c34 <__aeabi_d2f+0xfc>
 8000bb4:	1c72      	adds	r2, r6, #1
 8000bb6:	2efe      	cmp	r6, #254	; 0xfe
 8000bb8:	d0d0      	beq.n	8000b5c <__aeabi_d2f+0x24>
 8000bba:	0189      	lsls	r1, r1, #6
 8000bbc:	0a49      	lsrs	r1, r1, #9
 8000bbe:	b2d3      	uxtb	r3, r2
 8000bc0:	e7ce      	b.n	8000b60 <__aeabi_d2f+0x28>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	e7cb      	b.n	8000b60 <__aeabi_d2f+0x28>
 8000bc8:	0032      	movs	r2, r6
 8000bca:	3217      	adds	r2, #23
 8000bcc:	db22      	blt.n	8000c14 <__aeabi_d2f+0xdc>
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	221e      	movs	r2, #30
 8000bd2:	0409      	lsls	r1, r1, #16
 8000bd4:	4308      	orrs	r0, r1
 8000bd6:	1b92      	subs	r2, r2, r6
 8000bd8:	2a1f      	cmp	r2, #31
 8000bda:	dd1d      	ble.n	8000c18 <__aeabi_d2f+0xe0>
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4249      	negs	r1, r1
 8000be0:	1b8e      	subs	r6, r1, r6
 8000be2:	0001      	movs	r1, r0
 8000be4:	40f1      	lsrs	r1, r6
 8000be6:	000e      	movs	r6, r1
 8000be8:	2a20      	cmp	r2, #32
 8000bea:	d004      	beq.n	8000bf6 <__aeabi_d2f+0xbe>
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <__aeabi_d2f+0x108>)
 8000bee:	4694      	mov	ip, r2
 8000bf0:	4463      	add	r3, ip
 8000bf2:	4098      	lsls	r0, r3
 8000bf4:	4305      	orrs	r5, r0
 8000bf6:	0029      	movs	r1, r5
 8000bf8:	1e4d      	subs	r5, r1, #1
 8000bfa:	41a9      	sbcs	r1, r5
 8000bfc:	4331      	orrs	r1, r6
 8000bfe:	2600      	movs	r6, #0
 8000c00:	074b      	lsls	r3, r1, #29
 8000c02:	d1ce      	bne.n	8000ba2 <__aeabi_d2f+0x6a>
 8000c04:	2080      	movs	r0, #128	; 0x80
 8000c06:	000b      	movs	r3, r1
 8000c08:	04c0      	lsls	r0, r0, #19
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4003      	ands	r3, r0
 8000c0e:	4201      	tst	r1, r0
 8000c10:	d1d3      	bne.n	8000bba <__aeabi_d2f+0x82>
 8000c12:	e7af      	b.n	8000b74 <__aeabi_d2f+0x3c>
 8000c14:	2300      	movs	r3, #0
 8000c16:	e7ac      	b.n	8000b72 <__aeabi_d2f+0x3a>
 8000c18:	490a      	ldr	r1, [pc, #40]	; (8000c44 <__aeabi_d2f+0x10c>)
 8000c1a:	468c      	mov	ip, r1
 8000c1c:	0029      	movs	r1, r5
 8000c1e:	4463      	add	r3, ip
 8000c20:	40d1      	lsrs	r1, r2
 8000c22:	409d      	lsls	r5, r3
 8000c24:	000a      	movs	r2, r1
 8000c26:	0029      	movs	r1, r5
 8000c28:	4098      	lsls	r0, r3
 8000c2a:	1e4d      	subs	r5, r1, #1
 8000c2c:	41a9      	sbcs	r1, r5
 8000c2e:	4301      	orrs	r1, r0
 8000c30:	4311      	orrs	r1, r2
 8000c32:	e7e4      	b.n	8000bfe <__aeabi_d2f+0xc6>
 8000c34:	0033      	movs	r3, r6
 8000c36:	e79d      	b.n	8000b74 <__aeabi_d2f+0x3c>
 8000c38:	000007fe 	.word	0x000007fe
 8000c3c:	fffffc80 	.word	0xfffffc80
 8000c40:	fffffca2 	.word	0xfffffca2
 8000c44:	fffffc82 	.word	0xfffffc82

08000c48 <__clzsi2>:
 8000c48:	211c      	movs	r1, #28
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	041b      	lsls	r3, r3, #16
 8000c4e:	4298      	cmp	r0, r3
 8000c50:	d301      	bcc.n	8000c56 <__clzsi2+0xe>
 8000c52:	0c00      	lsrs	r0, r0, #16
 8000c54:	3910      	subs	r1, #16
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d301      	bcc.n	8000c60 <__clzsi2+0x18>
 8000c5c:	0a00      	lsrs	r0, r0, #8
 8000c5e:	3908      	subs	r1, #8
 8000c60:	091b      	lsrs	r3, r3, #4
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d301      	bcc.n	8000c6a <__clzsi2+0x22>
 8000c66:	0900      	lsrs	r0, r0, #4
 8000c68:	3904      	subs	r1, #4
 8000c6a:	a202      	add	r2, pc, #8	; (adr r2, 8000c74 <__clzsi2+0x2c>)
 8000c6c:	5c10      	ldrb	r0, [r2, r0]
 8000c6e:	1840      	adds	r0, r0, r1
 8000c70:	4770      	bx	lr
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	02020304 	.word	0x02020304
 8000c78:	01010101 	.word	0x01010101
	...

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f000 fa98 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f874 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f000 f928 	bl	8000ee4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c94:	f000 f8ac 	bl	8000df0 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000c98:	2390      	movs	r3, #144	; 0x90
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fd76 	bl	8001792 <HAL_GPIO_WritePin>
	  usDelay(3);
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f000 f964 	bl	8000f74 <usDelay>
	  //1. Output 10 usec TRIG
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000cac:	2390      	movs	r3, #144	; 0x90
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f000 fd6c 	bl	8001792 <HAL_GPIO_WritePin>
	  		usDelay(10);
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f000 f95a 	bl	8000f74 <usDelay>
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000cc0:	2390      	movs	r3, #144	; 0x90
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fd62 	bl	8001792 <HAL_GPIO_WritePin>

	  		//2. Wait for ECHO pin rising edge
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	2390      	movs	r3, #144	; 0x90
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fd3e 	bl	8001758 <HAL_GPIO_ReadPin>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d0f7      	beq.n	8000cd0 <main+0x4c>

	  		//3. Start measuring ECHO pulse width in usec
	  		numTicks = 0;
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <main+0xe0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8000ce6:	e004      	b.n	8000cf2 <main+0x6e>
	  		{
	  			numTicks++;
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <main+0xe0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <main+0xe0>)
 8000cf0:	601a      	str	r2, [r3, #0]
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8000cf2:	2390      	movs	r3, #144	; 0x90
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fd2d 	bl	8001758 <HAL_GPIO_ReadPin>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d0f1      	beq.n	8000ce8 <main+0x64>
	  			//usDelay(2); //2.8usec
	  		};

	  		//4. Estimate distance in cm
	  		distance = (numTicks + 0.0f)*2.8*speedOfSound;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <main+0xe0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff fc25 	bl	8000558 <__aeabi_ui2f>
 8000d0e:	1c03      	adds	r3, r0, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	1c18      	adds	r0, r3, #0
 8000d14:	f7ff fa84 	bl	8000220 <__aeabi_fadd>
 8000d18:	1c03      	adds	r3, r0, #0
 8000d1a:	1c18      	adds	r0, r3, #0
 8000d1c:	f7ff fec4 	bl	8000aa8 <__aeabi_f2d>
 8000d20:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <main+0xe4>)
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <main+0xe8>)
 8000d24:	f7ff fc54 	bl	80005d0 <__aeabi_dmul>
 8000d28:	0002      	movs	r2, r0
 8000d2a:	000b      	movs	r3, r1
 8000d2c:	0014      	movs	r4, r2
 8000d2e:	001d      	movs	r5, r3
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <main+0xec>)
 8000d32:	1c18      	adds	r0, r3, #0
 8000d34:	f7ff feb8 	bl	8000aa8 <__aeabi_f2d>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	000b      	movs	r3, r1
 8000d3c:	0020      	movs	r0, r4
 8000d3e:	0029      	movs	r1, r5
 8000d40:	f7ff fc46 	bl	80005d0 <__aeabi_dmul>
 8000d44:	0002      	movs	r2, r0
 8000d46:	000b      	movs	r3, r1
 8000d48:	0010      	movs	r0, r2
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	f7ff fef4 	bl	8000b38 <__aeabi_d2f>
 8000d50:	1c02      	adds	r2, r0, #0
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <main+0xf0>)
 8000d54:	601a      	str	r2, [r3, #0]

	  		//5. Print to UART terminal for debugging
	  		//sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
	  	//	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);

	  		HAL_Delay(1000);
 8000d56:	23fa      	movs	r3, #250	; 0xfa
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fa92 	bl	8001284 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000d60:	e79a      	b.n	8000c98 <main+0x14>
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000028 	.word	0x20000028
 8000d68:	66666666 	.word	0x66666666
 8000d6c:	40066666 	.word	0x40066666
 8000d70:	3c8c7e28 	.word	0x3c8c7e28
 8000d74:	20000030 	.word	0x20000030

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b093      	sub	sp, #76	; 0x4c
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	2414      	movs	r4, #20
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	0018      	movs	r0, r3
 8000d84:	2334      	movs	r3, #52	; 0x34
 8000d86:	001a      	movs	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f001 ffff 	bl	8002d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	0018      	movs	r0, r3
 8000d92:	2310      	movs	r3, #16
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f001 fff8 	bl	8002d8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2220      	movs	r2, #32
 8000da0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2201      	movs	r2, #1
 8000da6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fd0b 	bl	80017cc <HAL_RCC_OscConfig>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dba:	f000 f911 	bl	8000fe0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2101      	movs	r1, #1
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f001 f87c 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000de4:	f000 f8fc 	bl	8000fe0 <Error_Handler>
  }
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b013      	add	sp, #76	; 0x4c
 8000dee:	bd90      	pop	{r4, r7, pc}

08000df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	2318      	movs	r3, #24
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2100      	movs	r1, #0
 8000e02:	f001 ffc3 	bl	8002d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	2310      	movs	r3, #16
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	001a      	movs	r2, r3
 8000e10:	2100      	movs	r1, #0
 8000e12:	f001 ffbb 	bl	8002d8c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e16:	003b      	movs	r3, r7
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f001 ffb4 	bl	8002d8c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e24:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	05d2      	lsls	r2, r2, #23
 8000e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e2e:	222f      	movs	r2, #47	; 0x2f
 8000e30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4252      	negs	r2, r2
 8000e3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f001 f99c 	bl	800218c <HAL_TIM_Base_Init>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000e58:	f000 f8c2 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	2118      	movs	r1, #24
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0152      	lsls	r2, r2, #5
 8000e64:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e66:	187a      	adds	r2, r7, r1
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f001 fbe1 	bl	8002634 <HAL_TIM_ConfigClockSource>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000e76:	f000 f8b3 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f001 f9d5 	bl	800222c <HAL_TIM_IC_Init>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e86:	f000 f8ab 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e98:	187a      	adds	r2, r7, r1
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 fee8 	bl	8002c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000ea8:	f000 f89a 	bl	8000fe0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eac:	003b      	movs	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ec4:	0039      	movs	r1, r7
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 fb1c 	bl	8002508 <HAL_TIM_IC_ConfigChannel>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000ed4:	f000 f884 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b00a      	add	sp, #40	; 0x28
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000034 	.word	0x20000034

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	0018      	movs	r0, r3
 8000eee:	2314      	movs	r3, #20
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f001 ff4a 	bl	8002d8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000efa:	695a      	ldr	r2, [r3, #20]
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0289      	lsls	r1, r1, #10
 8000f02:	430a      	orrs	r2, r1
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	029b      	lsls	r3, r3, #10
 8000f0e:	4013      	ands	r3, r2
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000f14:	2390      	movs	r3, #144	; 0x90
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f000 fc38 	bl	8001792 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2220      	movs	r2, #32
 8000f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	1d3a      	adds	r2, r7, #4
 8000f3c:	2390      	movs	r3, #144	; 0x90
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 faa0 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2240      	movs	r2, #64	; 0x40
 8000f4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	1d3a      	adds	r2, r7, #4
 8000f5c:	2390      	movs	r3, #144	; 0x90
 8000f5e:	05db      	lsls	r3, r3, #23
 8000f60:	0011      	movs	r1, r2
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 fa90 	bl	8001488 <HAL_GPIO_Init>

}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b006      	add	sp, #24
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000

08000f74 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d801      	bhi.n	8000f86 <usDelay+0x12>
 8000f82:	2302      	movs	r3, #2
 8000f84:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	3a01      	subs	r2, #1
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	2201      	movs	r2, #1
 8000f96:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	438a      	bics	r2, r1
 8000fa6:	611a      	str	r2, [r3, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	05db      	lsls	r3, r3, #23
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	05db      	lsls	r3, r3, #23
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
	while((usTIM->SR&0x0001) != 1);
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d1f8      	bne.n	8000fba <usDelay+0x46>
	usTIM->SR &= ~(0x0001);
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	438a      	bics	r2, r1
 8000fd6:	611a      	str	r2, [r3, #16]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x44>)
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_MspInit+0x44>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	619a      	str	r2, [r3, #24]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_MspInit+0x44>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x44>)
 800100c:	69da      	ldr	r2, [r3, #28]
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_MspInit+0x44>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0549      	lsls	r1, r1, #21
 8001014:	430a      	orrs	r2, r1
 8001016:	61da      	str	r2, [r3, #28]
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_MspInit+0x44>)
 800101a:	69da      	ldr	r2, [r3, #28]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	055b      	lsls	r3, r3, #21
 8001020:	4013      	ands	r3, r2
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	2414      	movs	r4, #20
 800103e:	193b      	adds	r3, r7, r4
 8001040:	0018      	movs	r0, r3
 8001042:	2314      	movs	r3, #20
 8001044:	001a      	movs	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	f001 fea0 	bl	8002d8c <memset>
  if(htim_base->Instance==TIM2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	429a      	cmp	r2, r3
 8001056:	d138      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_TIM_Base_MspInit+0xa0>)
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_TIM_Base_MspInit+0xa0>)
 800105e:	2101      	movs	r1, #1
 8001060:	430a      	orrs	r2, r1
 8001062:	61da      	str	r2, [r3, #28]
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2201      	movs	r2, #1
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0289      	lsls	r1, r1, #10
 800107a:	430a      	orrs	r2, r1
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800108c:	0021      	movs	r1, r4
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	187a      	adds	r2, r7, r1
 80010ae:	2390      	movs	r3, #144	; 0x90
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 f9e7 	bl	8001488 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	200f      	movs	r0, #15
 80010c0:	f000 f9b0 	bl	8001424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010c4:	200f      	movs	r0, #15
 80010c6:	f000 f9c2 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b00b      	add	sp, #44	; 0x2c
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40021000 	.word	0x40021000

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f8a6 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  sys_tick++;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <SysTick_Handler+0x18>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	4b02      	ldr	r3, [pc, #8]	; (8001110 <SysTick_Handler+0x18>)
 8001108:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000002c 	.word	0x2000002c

08001114 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <TIM2_IRQHandler+0x14>)
 800111a:	0018      	movs	r0, r3
 800111c:	f001 f8de 	bl	80022dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	20000034 	.word	0x20000034

0800112c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <LoopForever+0x6>)
    LDR R1, [R0]
 800113e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001140:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <LoopForever+0xa>)
    CMP R1, R2
 8001144:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001146:	d105      	bne.n	8001154 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001148:	4812      	ldr	r0, [pc, #72]	; (8001194 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800114a:	4913      	ldr	r1, [pc, #76]	; (8001198 <LoopForever+0x12>)
    STR R1, [R0]
 800114c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800114e:	4813      	ldr	r0, [pc, #76]	; (800119c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001150:	4913      	ldr	r1, [pc, #76]	; (80011a0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001152:	6001      	str	r1, [r0, #0]

08001154 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001156:	4914      	ldr	r1, [pc, #80]	; (80011a8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <LoopForever+0x26>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800116c:	4c11      	ldr	r4, [pc, #68]	; (80011b4 <LoopForever+0x2e>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800117e:	f001 fde1 	bl	8002d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001182:	f7ff fd7f 	bl	8000c84 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   r0, =_estack
 8001188:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800118c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001190:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001194:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001198:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800119c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80011a0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011ac:	08002e2c 	.word	0x08002e2c
  ldr r2, =_sbss
 80011b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011b4:	20000080 	.word	0x20000080

080011b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_IRQHandler>
	...

080011bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_Init+0x24>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_Init+0x24>)
 80011c6:	2110      	movs	r1, #16
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 f809 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d2:	f7ff ff0b 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_InitTick+0x5c>)
 80011ee:	681c      	ldr	r4, [r3, #0]
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_InitTick+0x60>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	0019      	movs	r1, r3
 80011f6:	23fa      	movs	r3, #250	; 0xfa
 80011f8:	0098      	lsls	r0, r3, #2
 80011fa:	f7fe ff85 	bl	8000108 <__udivsi3>
 80011fe:	0003      	movs	r3, r0
 8001200:	0019      	movs	r1, r3
 8001202:	0020      	movs	r0, r4
 8001204:	f7fe ff80 	bl	8000108 <__udivsi3>
 8001208:	0003      	movs	r3, r0
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f92f 	bl	800146e <HAL_SYSTICK_Config>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e00f      	b.n	8001238 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d80b      	bhi.n	8001236 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	2301      	movs	r3, #1
 8001222:	425b      	negs	r3, r3
 8001224:	2200      	movs	r2, #0
 8001226:	0018      	movs	r0, r3
 8001228:	f000 f8fc 	bl	8001424 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_InitTick+0x64>)
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b003      	add	sp, #12
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	001a      	movs	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	18d2      	adds	r2, r2, r3
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_IncTick+0x20>)
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	20000008 	.word	0x20000008
 800126c:	2000007c 	.word	0x2000007c

08001270 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	2000007c 	.word	0x2000007c

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff fff0 	bl	8001270 <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3301      	adds	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	001a      	movs	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	189b      	adds	r3, r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	f7ff ffe0 	bl	8001270 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b004      	add	sp, #16
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	20000008 	.word	0x20000008

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	0002      	movs	r2, r0
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b7f      	cmp	r3, #127	; 0x7f
 80012de:	d809      	bhi.n	80012f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	001a      	movs	r2, r3
 80012e6:	231f      	movs	r3, #31
 80012e8:	401a      	ands	r2, r3
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_EnableIRQ+0x30>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	4091      	lsls	r1, r2
 80012f0:	000a      	movs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
  }
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	0002      	movs	r2, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b7f      	cmp	r3, #127	; 0x7f
 8001314:	d828      	bhi.n	8001368 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <__NVIC_SetPriority+0xd4>)
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b25b      	sxtb	r3, r3
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	33c0      	adds	r3, #192	; 0xc0
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	589b      	ldr	r3, [r3, r2]
 8001326:	1dfa      	adds	r2, r7, #7
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	0011      	movs	r1, r2
 800132c:	2203      	movs	r2, #3
 800132e:	400a      	ands	r2, r1
 8001330:	00d2      	lsls	r2, r2, #3
 8001332:	21ff      	movs	r1, #255	; 0xff
 8001334:	4091      	lsls	r1, r2
 8001336:	000a      	movs	r2, r1
 8001338:	43d2      	mvns	r2, r2
 800133a:	401a      	ands	r2, r3
 800133c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	401a      	ands	r2, r3
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	2303      	movs	r3, #3
 800134e:	4003      	ands	r3, r0
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001354:	481f      	ldr	r0, [pc, #124]	; (80013d4 <__NVIC_SetPriority+0xd4>)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	430a      	orrs	r2, r1
 8001360:	33c0      	adds	r3, #192	; 0xc0
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001366:	e031      	b.n	80013cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <__NVIC_SetPriority+0xd8>)
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	0019      	movs	r1, r3
 8001370:	230f      	movs	r3, #15
 8001372:	400b      	ands	r3, r1
 8001374:	3b08      	subs	r3, #8
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3306      	adds	r3, #6
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	18d3      	adds	r3, r2, r3
 800137e:	3304      	adds	r3, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1dfa      	adds	r2, r7, #7
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	0011      	movs	r1, r2
 8001388:	2203      	movs	r2, #3
 800138a:	400a      	ands	r2, r1
 800138c:	00d2      	lsls	r2, r2, #3
 800138e:	21ff      	movs	r1, #255	; 0xff
 8001390:	4091      	lsls	r1, r2
 8001392:	000a      	movs	r2, r1
 8001394:	43d2      	mvns	r2, r2
 8001396:	401a      	ands	r2, r3
 8001398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	401a      	ands	r2, r3
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0018      	movs	r0, r3
 80013a8:	2303      	movs	r3, #3
 80013aa:	4003      	ands	r3, r0
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <__NVIC_SetPriority+0xd8>)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	001c      	movs	r4, r3
 80013b8:	230f      	movs	r3, #15
 80013ba:	4023      	ands	r3, r4
 80013bc:	3b08      	subs	r3, #8
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	430a      	orrs	r2, r1
 80013c2:	3306      	adds	r3, #6
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	18c3      	adds	r3, r0, r3
 80013c8:	3304      	adds	r3, #4
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b003      	add	sp, #12
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	045b      	lsls	r3, r3, #17
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d301      	bcc.n	80013f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f0:	2301      	movs	r3, #1
 80013f2:	e010      	b.n	8001416 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <SysTick_Config+0x44>)
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	3a01      	subs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fc:	2301      	movs	r3, #1
 80013fe:	425b      	negs	r3, r3
 8001400:	2103      	movs	r1, #3
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff ff7c 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x44>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x44>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	210f      	movs	r1, #15
 8001430:	187b      	adds	r3, r7, r1
 8001432:	1c02      	adds	r2, r0, #0
 8001434:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	187b      	adds	r3, r7, r1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	0002      	movs	r2, r0
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b25b      	sxtb	r3, r3
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ff33 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff ffaf 	bl	80013dc <SysTick_Config>
 800147e:	0003      	movs	r3, r0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e149      	b.n	800172c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d100      	bne.n	80014b0 <HAL_GPIO_Init+0x28>
 80014ae:	e13a      	b.n	8001726 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d00b      	beq.n	80014d0 <HAL_GPIO_Init+0x48>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d007      	beq.n	80014d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c4:	2b11      	cmp	r3, #17
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b12      	cmp	r3, #18
 80014ce:	d130      	bne.n	8001532 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	409a      	lsls	r2, r3
 80014de:	0013      	movs	r3, r2
 80014e0:	43da      	mvns	r2, r3
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	409a      	lsls	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001506:	2201      	movs	r2, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	43da      	mvns	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	2201      	movs	r2, #1
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0xea>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b12      	cmp	r3, #18
 8001570:	d123      	bne.n	80015ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	58d3      	ldr	r3, [r2, r3]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2207      	movs	r2, #7
 8001584:	4013      	ands	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2107      	movs	r1, #7
 800159e:	400b      	ands	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	43da      	mvns	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	401a      	ands	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	055b      	lsls	r3, r3, #21
 80015f6:	4013      	ands	r3, r2
 80015f8:	d100      	bne.n	80015fc <HAL_GPIO_Init+0x174>
 80015fa:	e094      	b.n	8001726 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fc:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_GPIO_Init+0x2bc>)
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_GPIO_Init+0x2bc>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	619a      	str	r2, [r3, #24]
 8001608:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <HAL_GPIO_Init+0x2bc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2201      	movs	r2, #1
 800160e:	4013      	ands	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001614:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <HAL_GPIO_Init+0x2c0>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	589b      	ldr	r3, [r3, r2]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2203      	movs	r2, #3
 8001626:	4013      	ands	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	409a      	lsls	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	43da      	mvns	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	2390      	movs	r3, #144	; 0x90
 800163c:	05db      	lsls	r3, r3, #23
 800163e:	429a      	cmp	r2, r3
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x1d6>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a41      	ldr	r2, [pc, #260]	; (800174c <HAL_GPIO_Init+0x2c4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x1d2>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a40      	ldr	r2, [pc, #256]	; (8001750 <HAL_GPIO_Init+0x2c8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x1ce>
 8001652:	2302      	movs	r3, #2
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x1d8>
 8001656:	2305      	movs	r3, #5
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x1d8>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x1d8>
 800165e:	2300      	movs	r3, #0
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	2103      	movs	r1, #3
 8001664:	400a      	ands	r2, r1
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4093      	lsls	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001670:	4935      	ldr	r1, [pc, #212]	; (8001748 <HAL_GPIO_Init+0x2c0>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4013      	ands	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43da      	mvns	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	029b      	lsls	r3, r3, #10
 80016c0:	4013      	ands	r3, r2
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	035b      	lsls	r3, r3, #13
 80016ea:	4013      	ands	r3, r2
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43da      	mvns	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	039b      	lsls	r3, r3, #14
 8001714:	4013      	ands	r3, r2
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	40da      	lsrs	r2, r3
 8001734:	1e13      	subs	r3, r2, #0
 8001736:	d000      	beq.n	800173a <HAL_GPIO_Init+0x2b2>
 8001738:	e6ae      	b.n	8001498 <HAL_GPIO_Init+0x10>
  } 
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b006      	add	sp, #24
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000
 800174c:	48000400 	.word	0x48000400
 8001750:	48000800 	.word	0x48000800
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	000a      	movs	r2, r1
 8001762:	1cbb      	adds	r3, r7, #2
 8001764:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	1cba      	adds	r2, r7, #2
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	4013      	ands	r3, r2
 8001770:	d004      	beq.n	800177c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001772:	230f      	movs	r3, #15
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e003      	b.n	8001784 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	781b      	ldrb	r3, [r3, #0]
  }
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b004      	add	sp, #16
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	0008      	movs	r0, r1
 800179c:	0011      	movs	r1, r2
 800179e:	1cbb      	adds	r3, r7, #2
 80017a0:	1c02      	adds	r2, r0, #0
 80017a2:	801a      	strh	r2, [r3, #0]
 80017a4:	1c7b      	adds	r3, r7, #1
 80017a6:	1c0a      	adds	r2, r1, #0
 80017a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017aa:	1c7b      	adds	r3, r7, #1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b2:	1cbb      	adds	r3, r7, #2
 80017b4:	881a      	ldrh	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ba:	e003      	b.n	80017c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017bc:	1cbb      	adds	r3, r7, #2
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	f000 fb76 	bl	8001ecc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	d100      	bne.n	80017ec <HAL_RCC_OscConfig+0x20>
 80017ea:	e08e      	b.n	800190a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017ec:	4bc5      	ldr	r3, [pc, #788]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	220c      	movs	r2, #12
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d00e      	beq.n	8001816 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f8:	4bc2      	ldr	r3, [pc, #776]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	220c      	movs	r2, #12
 80017fe:	4013      	ands	r3, r2
 8001800:	2b08      	cmp	r3, #8
 8001802:	d117      	bne.n	8001834 <HAL_RCC_OscConfig+0x68>
 8001804:	4bbf      	ldr	r3, [pc, #764]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	23c0      	movs	r3, #192	; 0xc0
 800180a:	025b      	lsls	r3, r3, #9
 800180c:	401a      	ands	r2, r3
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	429a      	cmp	r2, r3
 8001814:	d10e      	bne.n	8001834 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001816:	4bbb      	ldr	r3, [pc, #748]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	029b      	lsls	r3, r3, #10
 800181e:	4013      	ands	r3, r2
 8001820:	d100      	bne.n	8001824 <HAL_RCC_OscConfig+0x58>
 8001822:	e071      	b.n	8001908 <HAL_RCC_OscConfig+0x13c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <HAL_RCC_OscConfig+0x62>
 800182c:	e06c      	b.n	8001908 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f000 fb4c 	bl	8001ecc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x80>
 800183c:	4bb1      	ldr	r3, [pc, #708]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4bb0      	ldr	r3, [pc, #704]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e02f      	b.n	80018ac <HAL_RCC_OscConfig+0xe0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0xa2>
 8001854:	4bab      	ldr	r3, [pc, #684]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4baa      	ldr	r3, [pc, #680]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 800185a:	49ab      	ldr	r1, [pc, #684]	; (8001b08 <HAL_RCC_OscConfig+0x33c>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	4ba8      	ldr	r3, [pc, #672]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4ba7      	ldr	r3, [pc, #668]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001866:	49a9      	ldr	r1, [pc, #676]	; (8001b0c <HAL_RCC_OscConfig+0x340>)
 8001868:	400a      	ands	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e01e      	b.n	80018ac <HAL_RCC_OscConfig+0xe0>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d10e      	bne.n	8001894 <HAL_RCC_OscConfig+0xc8>
 8001876:	4ba3      	ldr	r3, [pc, #652]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4ba2      	ldr	r3, [pc, #648]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	02c9      	lsls	r1, r1, #11
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	4b9f      	ldr	r3, [pc, #636]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b9e      	ldr	r3, [pc, #632]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	0249      	lsls	r1, r1, #9
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0xe0>
 8001894:	4b9b      	ldr	r3, [pc, #620]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b9a      	ldr	r3, [pc, #616]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 800189a:	499b      	ldr	r1, [pc, #620]	; (8001b08 <HAL_RCC_OscConfig+0x33c>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	4b98      	ldr	r3, [pc, #608]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b97      	ldr	r3, [pc, #604]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80018a6:	4999      	ldr	r1, [pc, #612]	; (8001b0c <HAL_RCC_OscConfig+0x340>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d014      	beq.n	80018de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fcdc 	bl	8001270 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff fcd7 	bl	8001270 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e2fd      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d0:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	029b      	lsls	r3, r3, #10
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0xf2>
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fcc7 	bl	8001270 <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fcc2 	bl	8001270 <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e2e8      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b82      	ldr	r3, [pc, #520]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	029b      	lsls	r3, r3, #10
 8001902:	4013      	ands	r3, r2
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x11c>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2202      	movs	r2, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d100      	bne.n	8001916 <HAL_RCC_OscConfig+0x14a>
 8001914:	e06c      	b.n	80019f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001916:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	220c      	movs	r2, #12
 800191c:	4013      	ands	r3, r2
 800191e:	d00e      	beq.n	800193e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001920:	4b78      	ldr	r3, [pc, #480]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	220c      	movs	r2, #12
 8001926:	4013      	ands	r3, r2
 8001928:	2b08      	cmp	r3, #8
 800192a:	d11f      	bne.n	800196c <HAL_RCC_OscConfig+0x1a0>
 800192c:	4b75      	ldr	r3, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	23c0      	movs	r3, #192	; 0xc0
 8001932:	025b      	lsls	r3, r3, #9
 8001934:	401a      	ands	r2, r3
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	429a      	cmp	r2, r3
 800193c:	d116      	bne.n	800196c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d005      	beq.n	8001954 <HAL_RCC_OscConfig+0x188>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e2bb      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	22f8      	movs	r2, #248	; 0xf8
 800195a:	4393      	bics	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00da      	lsls	r2, r3, #3
 8001964:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	e041      	b.n	80019f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d024      	beq.n	80019be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fc76 	bl	8001270 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff fc71 	bl	8001270 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e297      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2202      	movs	r2, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d0f1      	beq.n	800198a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	22f8      	movs	r2, #248	; 0xf8
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	00da      	lsls	r2, r3, #3
 80019b6:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e018      	b.n	80019f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	438a      	bics	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fc51 	bl	8001270 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fc4c 	bl	8001270 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e272      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d1f1      	bne.n	80019d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2208      	movs	r2, #8
 80019f6:	4013      	ands	r3, r2
 80019f8:	d036      	beq.n	8001a68 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a06:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a08:	2101      	movs	r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fc2f 	bl	8001270 <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fc2a 	bl	8001270 <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e250      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d0f1      	beq.n	8001a18 <HAL_RCC_OscConfig+0x24c>
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a36:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	438a      	bics	r2, r1
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fc15 	bl	8001270 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc10 	bl	8001270 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e236      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d1f1      	bne.n	8001a4c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d100      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2a8>
 8001a72:	e0b5      	b.n	8001be0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a74:	201f      	movs	r0, #31
 8001a76:	183b      	adds	r3, r7, r0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	055b      	lsls	r3, r3, #21
 8001a84:	4013      	ands	r3, r2
 8001a86:	d110      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0549      	lsls	r1, r1, #21
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a98:	69da      	ldr	r2, [r3, #28]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	055b      	lsls	r3, r3, #21
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_OscConfig+0x344>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d11a      	bne.n	8001aec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_RCC_OscConfig+0x344>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_RCC_OscConfig+0x344>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0049      	lsls	r1, r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fbd4 	bl	8001270 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff fbcf 	bl	8001270 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1f5      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_OscConfig+0x344>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d10f      	bne.n	8001b14 <HAL_RCC_OscConfig+0x348>
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	430a      	orrs	r2, r1
 8001afe:	621a      	str	r2, [r3, #32]
 8001b00:	e036      	b.n	8001b70 <HAL_RCC_OscConfig+0x3a4>
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40021000 	.word	0x40021000
 8001b08:	fffeffff 	.word	0xfffeffff
 8001b0c:	fffbffff 	.word	0xfffbffff
 8001b10:	40007000 	.word	0x40007000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10c      	bne.n	8001b36 <HAL_RCC_OscConfig+0x36a>
 8001b1c:	4bca      	ldr	r3, [pc, #808]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	4bc9      	ldr	r3, [pc, #804]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	438a      	bics	r2, r1
 8001b26:	621a      	str	r2, [r3, #32]
 8001b28:	4bc7      	ldr	r3, [pc, #796]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b2a:	6a1a      	ldr	r2, [r3, #32]
 8001b2c:	4bc6      	ldr	r3, [pc, #792]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b2e:	2104      	movs	r1, #4
 8001b30:	438a      	bics	r2, r1
 8001b32:	621a      	str	r2, [r3, #32]
 8001b34:	e01c      	b.n	8001b70 <HAL_RCC_OscConfig+0x3a4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x38c>
 8001b3e:	4bc2      	ldr	r3, [pc, #776]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b40:	6a1a      	ldr	r2, [r3, #32]
 8001b42:	4bc1      	ldr	r3, [pc, #772]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	2104      	movs	r1, #4
 8001b46:	430a      	orrs	r2, r1
 8001b48:	621a      	str	r2, [r3, #32]
 8001b4a:	4bbf      	ldr	r3, [pc, #764]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b4c:	6a1a      	ldr	r2, [r3, #32]
 8001b4e:	4bbe      	ldr	r3, [pc, #760]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	430a      	orrs	r2, r1
 8001b54:	621a      	str	r2, [r3, #32]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0x3a4>
 8001b58:	4bbb      	ldr	r3, [pc, #748]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	4bba      	ldr	r3, [pc, #744]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	438a      	bics	r2, r1
 8001b62:	621a      	str	r2, [r3, #32]
 8001b64:	4bb8      	ldr	r3, [pc, #736]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	4bb7      	ldr	r3, [pc, #732]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	438a      	bics	r2, r1
 8001b6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d014      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fb7a 	bl	8001270 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fb75 	bl	8001270 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	4aaf      	ldr	r2, [pc, #700]	; (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e19a      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b96:	4bac      	ldr	r3, [pc, #688]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3b6>
 8001ba0:	e013      	b.n	8001bca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fb65 	bl	8001270 <HAL_GetTick>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	e009      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff fb60 	bl	8001270 <HAL_GetTick>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4aa5      	ldr	r2, [pc, #660]	; (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e185      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	4ba1      	ldr	r3, [pc, #644]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bca:	231f      	movs	r3, #31
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b9c      	ldr	r3, [pc, #624]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001bd6:	69da      	ldr	r2, [r3, #28]
 8001bd8:	4b9b      	ldr	r3, [pc, #620]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001bda:	499d      	ldr	r1, [pc, #628]	; (8001e50 <HAL_RCC_OscConfig+0x684>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2210      	movs	r2, #16
 8001be6:	4013      	ands	r3, r2
 8001be8:	d063      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d12a      	bne.n	8001c48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bf2:	4b95      	ldr	r3, [pc, #596]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf6:	4b94      	ldr	r3, [pc, #592]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001bfe:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c02:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	430a      	orrs	r2, r1
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fb31 	bl	8001270 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c14:	f7ff fb2c 	bl	8001270 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e152      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f1      	beq.n	8001c14 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c30:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	22f8      	movs	r2, #248	; 0xf8
 8001c36:	4393      	bics	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	00da      	lsls	r2, r3, #3
 8001c40:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
 8001c46:	e034      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	3305      	adds	r3, #5
 8001c4e:	d111      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c50:	4b7d      	ldr	r3, [pc, #500]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c54:	4b7c      	ldr	r3, [pc, #496]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c56:	2104      	movs	r1, #4
 8001c58:	438a      	bics	r2, r1
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c5c:	4b7a      	ldr	r3, [pc, #488]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c60:	22f8      	movs	r2, #248	; 0xf8
 8001c62:	4393      	bics	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	00da      	lsls	r2, r3, #3
 8001c6c:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	e01e      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c74:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c80:	4b71      	ldr	r3, [pc, #452]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c84:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	438a      	bics	r2, r1
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff faf0 	bl	8001270 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c96:	f7ff faeb 	bl	8001270 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e111      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ca8:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d1f1      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d05c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cbc:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cc8:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d114      	bne.n	8001cfe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cd4:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	23c0      	movs	r3, #192	; 0xc0
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	401a      	ands	r2, r3
 8001cde:	23c0      	movs	r3, #192	; 0xc0
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d10b      	bne.n	8001cfe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ce6:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	025b      	lsls	r3, r3, #9
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d040      	beq.n	8001d74 <HAL_RCC_OscConfig+0x5a8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d03c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0e6      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d06:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0a:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0249      	lsls	r1, r1, #9
 8001d10:	430a      	orrs	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff faac 	bl	8001270 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1e:	f7ff faa7 	bl	8001270 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0cd      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d30:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	025b      	lsls	r3, r3, #9
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x552>
 8001d3c:	e01b      	b.n	8001d76 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d3e:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d44:	4943      	ldr	r1, [pc, #268]	; (8001e54 <HAL_RCC_OscConfig+0x688>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7ff fa91 	bl	8001270 <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d54:	f7ff fa8c 	bl	8001270 <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0b2      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	025b      	lsls	r3, r3, #9
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x588>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d74:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d100      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5b4>
 8001d7e:	e0a4      	b.n	8001eca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	220c      	movs	r2, #12
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d100      	bne.n	8001d8e <HAL_RCC_OscConfig+0x5c2>
 8001d8c:	e078      	b.n	8001e80 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d14c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001d9c:	492e      	ldr	r1, [pc, #184]	; (8001e58 <HAL_RCC_OscConfig+0x68c>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fa65 	bl	8001270 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fa60 	bl	8001270 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e086      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	049b      	lsls	r3, r3, #18
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	220f      	movs	r2, #15
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_RCC_OscConfig+0x690>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	431a      	orrs	r2, r3
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	0449      	lsls	r1, r1, #17
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fa33 	bl	8001270 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff fa2e 	bl	8001270 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e054      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	049b      	lsls	r3, r3, #18
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x644>
 8001e2e:	e04c      	b.n	8001eca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_RCC_OscConfig+0x67c>)
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <HAL_RCC_OscConfig+0x68c>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fa18 	bl	8001270 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x6a6>
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	00001388 	.word	0x00001388
 8001e50:	efffffff 	.word	0xefffffff
 8001e54:	fffeffff 	.word	0xfffeffff
 8001e58:	feffffff 	.word	0xfeffffff
 8001e5c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff fa06 	bl	8001270 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e02c      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_RCC_OscConfig+0x708>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	049b      	lsls	r3, r3, #18
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x694>
 8001e7e:	e024      	b.n	8001eca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e01f      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_RCC_OscConfig+0x708>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x708>)
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	23c0      	movs	r3, #192	; 0xc0
 8001e9c:	025b      	lsls	r3, r3, #9
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d10e      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	220f      	movs	r2, #15
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	23f0      	movs	r3, #240	; 0xf0
 8001eba:	039b      	lsls	r3, r3, #14
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b008      	add	sp, #32
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0bf      	b.n	800206c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_RCC_ClockConfig+0x19c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d911      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b5e      	ldr	r3, [pc, #376]	; (8002074 <HAL_RCC_ClockConfig+0x19c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4393      	bics	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <HAL_RCC_ClockConfig+0x19c>)
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x19c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0a6      	b.n	800206c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	d015      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d006      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f32:	4b51      	ldr	r3, [pc, #324]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4b50      	ldr	r3, [pc, #320]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001f38:	21e0      	movs	r1, #224	; 0xe0
 8001f3a:	00c9      	lsls	r1, r1, #3
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	22f0      	movs	r2, #240	; 0xf0
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d04c      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b44      	ldr	r3, [pc, #272]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	029b      	lsls	r3, r3, #10
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d120      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e07a      	b.n	800206c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	049b      	lsls	r3, r3, #18
 8001f86:	4013      	ands	r3, r2
 8001f88:	d114      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06e      	b.n	800206c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d108      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e062      	b.n	800206c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e05b      	b.n	800206c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff f952 	bl	8001270 <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd2:	f7ff f94d 	bl	8001270 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4a27      	ldr	r2, [pc, #156]	; (800207c <HAL_RCC_ClockConfig+0x1a4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e042      	b.n	800206c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	220c      	movs	r2, #12
 8001fec:	401a      	ands	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1ec      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_ClockConfig+0x19c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d211      	bcs.n	800202a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_RCC_ClockConfig+0x19c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	4393      	bics	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_RCC_ClockConfig+0x19c>)
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x19c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	4013      	ands	r3, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e020      	b.n	800206c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_RCC_ClockConfig+0x1a8>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002048:	f000 f820 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800204c:	0001      	movs	r1, r0
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_RCC_ClockConfig+0x1a0>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	220f      	movs	r2, #15
 8002056:	4013      	ands	r3, r2
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x1ac>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	000a      	movs	r2, r1
 800205e:	40da      	lsrs	r2, r3
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1b0>)
 8002062:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff f8bd 	bl	80011e4 <HAL_InitTick>
  
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b004      	add	sp, #16
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40022000 	.word	0x40022000
 8002078:	40021000 	.word	0x40021000
 800207c:	00001388 	.word	0x00001388
 8002080:	fffff8ff 	.word	0xfffff8ff
 8002084:	08002e14 	.word	0x08002e14
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b08f      	sub	sp, #60	; 0x3c
 8002090:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002092:	2314      	movs	r3, #20
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	4a38      	ldr	r2, [pc, #224]	; (8002178 <HAL_RCC_GetSysClockFreq+0xec>)
 8002098:	ca13      	ldmia	r2!, {r0, r1, r4}
 800209a:	c313      	stmia	r3!, {r0, r1, r4}
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	4a36      	ldr	r2, [pc, #216]	; (800217c <HAL_RCC_GetSysClockFreq+0xf0>)
 80020a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020a6:	c313      	stmia	r3!, {r0, r1, r4}
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	220c      	movs	r2, #12
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d047      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xd4>
 80020d0:	d849      	bhi.n	8002166 <HAL_RCC_GetSysClockFreq+0xda>
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x50>
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x56>
 80020da:	e044      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020e0:	e044      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	0c9b      	lsrs	r3, r3, #18
 80020e6:	220f      	movs	r2, #15
 80020e8:	4013      	ands	r3, r2
 80020ea:	2214      	movs	r2, #20
 80020ec:	18ba      	adds	r2, r7, r2
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	220f      	movs	r2, #15
 80020f8:	4013      	ands	r3, r2
 80020fa:	1d3a      	adds	r2, r7, #4
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002102:	23c0      	movs	r3, #192	; 0xc0
 8002104:	025b      	lsls	r3, r3, #9
 8002106:	401a      	ands	r2, r3
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	025b      	lsls	r3, r3, #9
 800210c:	429a      	cmp	r2, r3
 800210e:	d109      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002112:	481c      	ldr	r0, [pc, #112]	; (8002184 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002114:	f7fd fff8 	bl	8000108 <__udivsi3>
 8002118:	0003      	movs	r3, r0
 800211a:	001a      	movs	r2, r3
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	4353      	muls	r3, r2
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
 8002122:	e01a      	b.n	800215a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002126:	23c0      	movs	r3, #192	; 0xc0
 8002128:	025b      	lsls	r3, r3, #9
 800212a:	401a      	ands	r2, r3
 800212c:	23c0      	movs	r3, #192	; 0xc0
 800212e:	025b      	lsls	r3, r3, #9
 8002130:	429a      	cmp	r2, r3
 8002132:	d109      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002136:	4814      	ldr	r0, [pc, #80]	; (8002188 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002138:	f7fd ffe6 	bl	8000108 <__udivsi3>
 800213c:	0003      	movs	r3, r0
 800213e:	001a      	movs	r2, r3
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	4353      	muls	r3, r2
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
 8002146:	e008      	b.n	800215a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800214a:	480e      	ldr	r0, [pc, #56]	; (8002184 <HAL_RCC_GetSysClockFreq+0xf8>)
 800214c:	f7fd ffdc 	bl	8000108 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	001a      	movs	r2, r3
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	4353      	muls	r3, r2
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800215e:	e005      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800216a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b00f      	add	sp, #60	; 0x3c
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	08002db4 	.word	0x08002db4
 800217c:	08002dc4 	.word	0x08002dc4
 8002180:	40021000 	.word	0x40021000
 8002184:	007a1200 	.word	0x007a1200
 8002188:	02dc6c00 	.word	0x02dc6c00

0800218c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e042      	b.n	8002224 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	223d      	movs	r2, #61	; 0x3d
 80021a2:	5c9b      	ldrb	r3, [r3, r2]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d107      	bne.n	80021ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	223c      	movs	r2, #60	; 0x3c
 80021ae:	2100      	movs	r1, #0
 80021b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7fe ff3d 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	223d      	movs	r2, #61	; 0x3d
 80021be:	2102      	movs	r1, #2
 80021c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	0019      	movs	r1, r3
 80021cc:	0010      	movs	r0, r2
 80021ce:	f000 fb23 	bl	8002818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2246      	movs	r2, #70	; 0x46
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	223e      	movs	r2, #62	; 0x3e
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2241      	movs	r2, #65	; 0x41
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2242      	movs	r2, #66	; 0x42
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2243      	movs	r2, #67	; 0x43
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2244      	movs	r2, #68	; 0x44
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2245      	movs	r2, #69	; 0x45
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223d      	movs	r2, #61	; 0x3d
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e042      	b.n	80022c4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	223d      	movs	r2, #61	; 0x3d
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223c      	movs	r2, #60	; 0x3c
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f839 	bl	80022cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	223d      	movs	r2, #61	; 0x3d
 800225e:	2102      	movs	r1, #2
 8002260:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	0019      	movs	r1, r3
 800226c:	0010      	movs	r0, r2
 800226e:	f000 fad3 	bl	8002818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2246      	movs	r2, #70	; 0x46
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	223e      	movs	r2, #62	; 0x3e
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223f      	movs	r2, #63	; 0x3f
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2241      	movs	r2, #65	; 0x41
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2242      	movs	r2, #66	; 0x42
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2243      	movs	r2, #67	; 0x43
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2244      	movs	r2, #68	; 0x44
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2245      	movs	r2, #69	; 0x45
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	223d      	movs	r2, #61	; 0x3d
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2202      	movs	r2, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d124      	bne.n	800233c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2202      	movs	r2, #2
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d11d      	bne.n	800233c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2203      	movs	r2, #3
 8002306:	4252      	negs	r2, r2
 8002308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2203      	movs	r2, #3
 8002318:	4013      	ands	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0018      	movs	r0, r3
 8002320:	f000 fa62 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 8002324:	e007      	b.n	8002336 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 fa55 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 fa61 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2204      	movs	r2, #4
 8002344:	4013      	ands	r3, r2
 8002346:	2b04      	cmp	r3, #4
 8002348:	d125      	bne.n	8002396 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2204      	movs	r2, #4
 8002352:	4013      	ands	r3, r2
 8002354:	2b04      	cmp	r3, #4
 8002356:	d11e      	bne.n	8002396 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2205      	movs	r2, #5
 800235e:	4252      	negs	r2, r2
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	23c0      	movs	r3, #192	; 0xc0
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 fa35 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 800237e:	e007      	b.n	8002390 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f000 fa28 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 fa34 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2208      	movs	r2, #8
 800239e:	4013      	ands	r3, r2
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d124      	bne.n	80023ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2208      	movs	r2, #8
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d11d      	bne.n	80023ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2209      	movs	r2, #9
 80023b8:	4252      	negs	r2, r2
 80023ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2204      	movs	r2, #4
 80023c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2203      	movs	r2, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 fa09 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 80023d6:	e007      	b.n	80023e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 f9fc 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 fa08 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2210      	movs	r2, #16
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d125      	bne.n	8002448 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2210      	movs	r2, #16
 8002404:	4013      	ands	r3, r2
 8002406:	2b10      	cmp	r3, #16
 8002408:	d11e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2211      	movs	r2, #17
 8002410:	4252      	negs	r2, r2
 8002412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2208      	movs	r2, #8
 8002418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4013      	ands	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	0018      	movs	r0, r3
 800242c:	f000 f9dc 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 8002430:	e007      	b.n	8002442 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f000 f9cf 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f9db 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2201      	movs	r2, #1
 8002450:	4013      	ands	r3, r2
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10f      	bne.n	8002476 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	4013      	ands	r3, r2
 8002460:	2b01      	cmp	r3, #1
 8002462:	d108      	bne.n	8002476 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2202      	movs	r2, #2
 800246a:	4252      	negs	r2, r2
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f9a9 	bl	80027c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	4013      	ands	r3, r2
 8002480:	2b80      	cmp	r3, #128	; 0x80
 8002482:	d10f      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	4013      	ands	r3, r2
 800248e:	2b80      	cmp	r3, #128	; 0x80
 8002490:	d108      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2281      	movs	r2, #129	; 0x81
 8002498:	4252      	negs	r2, r2
 800249a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fc48 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2240      	movs	r2, #64	; 0x40
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	d10f      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2240      	movs	r2, #64	; 0x40
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d108      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2241      	movs	r2, #65	; 0x41
 80024c6:	4252      	negs	r2, r2
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 f99b 	bl	8002808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2220      	movs	r2, #32
 80024da:	4013      	ands	r3, r2
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d10f      	bne.n	8002500 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d108      	bne.n	8002500 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2221      	movs	r2, #33	; 0x21
 80024f4:	4252      	negs	r2, r2
 80024f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 fc12 	bl	8002d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b002      	add	sp, #8
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	223c      	movs	r2, #60	; 0x3c
 8002518:	5c9b      	ldrb	r3, [r3, r2]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_TIM_IC_ConfigChannel+0x1a>
 800251e:	2302      	movs	r3, #2
 8002520:	e082      	b.n	8002628 <HAL_TIM_IC_ConfigChannel+0x120>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	223c      	movs	r2, #60	; 0x3c
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11b      	bne.n	8002568 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f000 f9e0 	bl	8002904 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	210c      	movs	r1, #12
 8002550:	438a      	bics	r2, r1
 8002552:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6999      	ldr	r1, [r3, #24]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	e05a      	b.n	800261e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b04      	cmp	r3, #4
 800256c:	d11c      	bne.n	80025a8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f000 fa45 	bl	8002a0c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4928      	ldr	r1, [pc, #160]	; (8002630 <HAL_TIM_IC_ConfigChannel+0x128>)
 800258e:	400a      	ands	r2, r1
 8002590:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6999      	ldr	r1, [r3, #24]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	021a      	lsls	r2, r3, #8
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	619a      	str	r2, [r3, #24]
 80025a6:	e03a      	b.n	800261e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11b      	bne.n	80025e6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f000 fa99 	bl	8002af4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	210c      	movs	r1, #12
 80025ce:	438a      	bics	r2, r1
 80025d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69d9      	ldr	r1, [r3, #28]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
 80025e4:	e01b      	b.n	800261e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f000 fabd 	bl	8002b74 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	490a      	ldr	r1, [pc, #40]	; (8002630 <HAL_TIM_IC_ConfigChannel+0x128>)
 8002606:	400a      	ands	r2, r1
 8002608:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69d9      	ldr	r1, [r3, #28]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	021a      	lsls	r2, r3, #8
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	223c      	movs	r2, #60	; 0x3c
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b004      	add	sp, #16
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fffff3ff 	.word	0xfffff3ff

08002634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	223c      	movs	r2, #60	; 0x3c
 8002642:	5c9b      	ldrb	r3, [r3, r2]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_TIM_ConfigClockSource+0x18>
 8002648:	2302      	movs	r3, #2
 800264a:	e0b7      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x188>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	223c      	movs	r2, #60	; 0x3c
 8002650:	2101      	movs	r1, #1
 8002652:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	223d      	movs	r2, #61	; 0x3d
 8002658:	2102      	movs	r1, #2
 800265a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2277      	movs	r2, #119	; 0x77
 8002668:	4393      	bics	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a55      	ldr	r2, [pc, #340]	; (80027c4 <HAL_TIM_ConfigClockSource+0x190>)
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	0192      	lsls	r2, r2, #6
 8002684:	4293      	cmp	r3, r2
 8002686:	d040      	beq.n	800270a <HAL_TIM_ConfigClockSource+0xd6>
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	0192      	lsls	r2, r2, #6
 800268c:	4293      	cmp	r3, r2
 800268e:	d900      	bls.n	8002692 <HAL_TIM_ConfigClockSource+0x5e>
 8002690:	e088      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	0152      	lsls	r2, r2, #5
 8002696:	4293      	cmp	r3, r2
 8002698:	d100      	bne.n	800269c <HAL_TIM_ConfigClockSource+0x68>
 800269a:	e085      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x174>
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	0152      	lsls	r2, r2, #5
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d900      	bls.n	80026a6 <HAL_TIM_ConfigClockSource+0x72>
 80026a4:	e07e      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
 80026a6:	2b70      	cmp	r3, #112	; 0x70
 80026a8:	d018      	beq.n	80026dc <HAL_TIM_ConfigClockSource+0xa8>
 80026aa:	d900      	bls.n	80026ae <HAL_TIM_ConfigClockSource+0x7a>
 80026ac:	e07a      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
 80026ae:	2b60      	cmp	r3, #96	; 0x60
 80026b0:	d04f      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0x11e>
 80026b2:	d900      	bls.n	80026b6 <HAL_TIM_ConfigClockSource+0x82>
 80026b4:	e076      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
 80026b6:	2b50      	cmp	r3, #80	; 0x50
 80026b8:	d03b      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0xfe>
 80026ba:	d900      	bls.n	80026be <HAL_TIM_ConfigClockSource+0x8a>
 80026bc:	e072      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d057      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x13e>
 80026c2:	d900      	bls.n	80026c6 <HAL_TIM_ConfigClockSource+0x92>
 80026c4:	e06e      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
 80026c6:	2b30      	cmp	r3, #48	; 0x30
 80026c8:	d063      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x15e>
 80026ca:	d86b      	bhi.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d060      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x15e>
 80026d0:	d868      	bhi.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d05d      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x15e>
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d05b      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026da:	e063      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f000 faa2 	bl	8002c34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2277      	movs	r2, #119	; 0x77
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	609a      	str	r2, [r3, #8]
      break;
 8002708:	e04f      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f000 fa8b 	bl	8002c34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	01c9      	lsls	r1, r1, #7
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
      break;
 8002730:	e03b      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	001a      	movs	r2, r3
 8002740:	f000 f936 	bl	80029b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2150      	movs	r1, #80	; 0x50
 800274a:	0018      	movs	r0, r3
 800274c:	f000 fa58 	bl	8002c00 <TIM_ITRx_SetConfig>
      break;
 8002750:	e02b      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	001a      	movs	r2, r3
 8002760:	f000 f996 	bl	8002a90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2160      	movs	r1, #96	; 0x60
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fa48 	bl	8002c00 <TIM_ITRx_SetConfig>
      break;
 8002770:	e01b      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	001a      	movs	r2, r3
 8002780:	f000 f916 	bl	80029b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2140      	movs	r1, #64	; 0x40
 800278a:	0018      	movs	r0, r3
 800278c:	f000 fa38 	bl	8002c00 <TIM_ITRx_SetConfig>
      break;
 8002790:	e00b      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0019      	movs	r1, r3
 800279c:	0010      	movs	r0, r2
 800279e:	f000 fa2f 	bl	8002c00 <TIM_ITRx_SetConfig>
        break;
 80027a2:	e002      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x176>
      break;
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	e000      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x176>
      break;
 80027a8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	223d      	movs	r2, #61	; 0x3d
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	223c      	movs	r2, #60	; 0x3c
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b004      	add	sp, #16
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	ffff00ff 	.word	0xffff00ff

080027c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}

08002818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a30      	ldr	r2, [pc, #192]	; (80028ec <TIM_Base_SetConfig+0xd4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d008      	beq.n	8002842 <TIM_Base_SetConfig+0x2a>
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	05db      	lsls	r3, r3, #23
 8002836:	429a      	cmp	r2, r3
 8002838:	d003      	beq.n	8002842 <TIM_Base_SetConfig+0x2a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <TIM_Base_SetConfig+0xd8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2270      	movs	r2, #112	; 0x70
 8002846:	4393      	bics	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a25      	ldr	r2, [pc, #148]	; (80028ec <TIM_Base_SetConfig+0xd4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d014      	beq.n	8002886 <TIM_Base_SetConfig+0x6e>
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	429a      	cmp	r2, r3
 8002864:	d00f      	beq.n	8002886 <TIM_Base_SetConfig+0x6e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <TIM_Base_SetConfig+0xd8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00b      	beq.n	8002886 <TIM_Base_SetConfig+0x6e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <TIM_Base_SetConfig+0xdc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <TIM_Base_SetConfig+0x6e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <TIM_Base_SetConfig+0xe0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d003      	beq.n	8002886 <TIM_Base_SetConfig+0x6e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <TIM_Base_SetConfig+0xe4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d108      	bne.n	8002898 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <TIM_Base_SetConfig+0xe8>)
 800288a:	4013      	ands	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	4393      	bics	r3, r2
 800289e:	001a      	movs	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <TIM_Base_SetConfig+0xd4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <TIM_Base_SetConfig+0xbe>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <TIM_Base_SetConfig+0xe0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d003      	beq.n	80028d6 <TIM_Base_SetConfig+0xbe>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <TIM_Base_SetConfig+0xe4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d103      	bne.n	80028de <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	615a      	str	r2, [r3, #20]
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b004      	add	sp, #16
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40002000 	.word	0x40002000
 80028f8:	40014400 	.word	0x40014400
 80028fc:	40014800 	.word	0x40014800
 8002900:	fffffcff 	.word	0xfffffcff

08002904 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	2201      	movs	r2, #1
 8002918:	4393      	bics	r3, r2
 800291a:	001a      	movs	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <TIM_TI1_SetConfig+0xa4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d008      	beq.n	8002946 <TIM_TI1_SetConfig+0x42>
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	05db      	lsls	r3, r3, #23
 800293a:	429a      	cmp	r2, r3
 800293c:	d003      	beq.n	8002946 <TIM_TI1_SetConfig+0x42>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a1a      	ldr	r2, [pc, #104]	; (80029ac <TIM_TI1_SetConfig+0xa8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <TIM_TI1_SetConfig+0x46>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <TIM_TI1_SetConfig+0x48>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2203      	movs	r2, #3
 8002954:	4393      	bics	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e003      	b.n	800296a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2201      	movs	r2, #1
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	22f0      	movs	r2, #240	; 0xf0
 800296e:	4393      	bics	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	22ff      	movs	r2, #255	; 0xff
 8002978:	4013      	ands	r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	220a      	movs	r2, #10
 8002984:	4393      	bics	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	220a      	movs	r2, #10
 800298c:	4013      	ands	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	621a      	str	r2, [r3, #32]
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b006      	add	sp, #24
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400

080029b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	2201      	movs	r2, #1
 80029c8:	4393      	bics	r3, r2
 80029ca:	001a      	movs	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	22f0      	movs	r2, #240	; 0xf0
 80029da:	4393      	bics	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	220a      	movs	r2, #10
 80029ec:	4393      	bics	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	621a      	str	r2, [r3, #32]
}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b006      	add	sp, #24
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	4393      	bics	r3, r2
 8002a22:	001a      	movs	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <TIM_TI2_SetConfig+0x7c>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <TIM_TI2_SetConfig+0x80>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	031b      	lsls	r3, r3, #12
 8002a52:	041b      	lsls	r3, r3, #16
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	22a0      	movs	r2, #160	; 0xa0
 8002a60:	4393      	bics	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	22a0      	movs	r2, #160	; 0xa0
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	621a      	str	r2, [r3, #32]
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b006      	add	sp, #24
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	fffffcff 	.word	0xfffffcff
 8002a8c:	ffff0fff 	.word	0xffff0fff

08002a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <TIM_TI2_ConfigInputStage+0x60>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	031b      	lsls	r3, r3, #12
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	22a0      	movs	r2, #160	; 0xa0
 8002acc:	4393      	bics	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b006      	add	sp, #24
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	ffff0fff 	.word	0xffff0fff

08002af4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <TIM_TI3_SetConfig+0x78>)
 8002b08:	401a      	ands	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4393      	bics	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	22f0      	movs	r2, #240	; 0xf0
 8002b2e:	4393      	bics	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	22ff      	movs	r2, #255	; 0xff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <TIM_TI3_SetConfig+0x7c>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	021a      	lsls	r2, r3, #8
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	4013      	ands	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	621a      	str	r2, [r3, #32]
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b006      	add	sp, #24
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	fffffeff 	.word	0xfffffeff
 8002b70:	fffff5ff 	.word	0xfffff5ff

08002b74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <TIM_TI4_SetConfig+0x7c>)
 8002b88:	401a      	ands	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <TIM_TI4_SetConfig+0x80>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <TIM_TI4_SetConfig+0x84>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	031b      	lsls	r3, r3, #12
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	0c1b      	lsrs	r3, r3, #16
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <TIM_TI4_SetConfig+0x88>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	031a      	lsls	r2, r3, #12
 8002bce:	23a0      	movs	r3, #160	; 0xa0
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b006      	add	sp, #24
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	ffffefff 	.word	0xffffefff
 8002bf4:	fffffcff 	.word	0xfffffcff
 8002bf8:	ffff0fff 	.word	0xffff0fff
 8002bfc:	ffff5fff 	.word	0xffff5fff

08002c00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2270      	movs	r2, #112	; 0x70
 8002c14:	4393      	bics	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	2207      	movs	r2, #7
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	609a      	str	r2, [r3, #8]
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <TIM_ETR_SetConfig+0x3c>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b006      	add	sp, #24
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	ffff00ff 	.word	0xffff00ff

08002c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223c      	movs	r2, #60	; 0x3c
 8002c82:	5c9b      	ldrb	r3, [r3, r2]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e042      	b.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	223c      	movs	r2, #60	; 0x3c
 8002c90:	2101      	movs	r1, #1
 8002c92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	223d      	movs	r2, #61	; 0x3d
 8002c98:	2102      	movs	r1, #2
 8002c9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2270      	movs	r2, #112	; 0x70
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00a      	beq.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10c      	bne.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	4393      	bics	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	223d      	movs	r2, #61	; 0x3d
 8002d04:	2101      	movs	r1, #1
 8002d06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	223c      	movs	r2, #60	; 0x3c
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400

08002d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <__libc_init_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	2600      	movs	r6, #0
 8002d48:	4d0c      	ldr	r5, [pc, #48]	; (8002d7c <__libc_init_array+0x38>)
 8002d4a:	4c0d      	ldr	r4, [pc, #52]	; (8002d80 <__libc_init_array+0x3c>)
 8002d4c:	1b64      	subs	r4, r4, r5
 8002d4e:	10a4      	asrs	r4, r4, #2
 8002d50:	42a6      	cmp	r6, r4
 8002d52:	d109      	bne.n	8002d68 <__libc_init_array+0x24>
 8002d54:	2600      	movs	r6, #0
 8002d56:	f000 f821 	bl	8002d9c <_init>
 8002d5a:	4d0a      	ldr	r5, [pc, #40]	; (8002d84 <__libc_init_array+0x40>)
 8002d5c:	4c0a      	ldr	r4, [pc, #40]	; (8002d88 <__libc_init_array+0x44>)
 8002d5e:	1b64      	subs	r4, r4, r5
 8002d60:	10a4      	asrs	r4, r4, #2
 8002d62:	42a6      	cmp	r6, r4
 8002d64:	d105      	bne.n	8002d72 <__libc_init_array+0x2e>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	00b3      	lsls	r3, r6, #2
 8002d6a:	58eb      	ldr	r3, [r5, r3]
 8002d6c:	4798      	blx	r3
 8002d6e:	3601      	adds	r6, #1
 8002d70:	e7ee      	b.n	8002d50 <__libc_init_array+0xc>
 8002d72:	00b3      	lsls	r3, r6, #2
 8002d74:	58eb      	ldr	r3, [r5, r3]
 8002d76:	4798      	blx	r3
 8002d78:	3601      	adds	r6, #1
 8002d7a:	e7f2      	b.n	8002d62 <__libc_init_array+0x1e>
 8002d7c:	08002e24 	.word	0x08002e24
 8002d80:	08002e24 	.word	0x08002e24
 8002d84:	08002e24 	.word	0x08002e24
 8002d88:	08002e28 	.word	0x08002e28

08002d8c <memset>:
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	1882      	adds	r2, r0, r2
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d100      	bne.n	8002d96 <memset+0xa>
 8002d94:	4770      	bx	lr
 8002d96:	7019      	strb	r1, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e7f9      	b.n	8002d90 <memset+0x4>

08002d9c <_init>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr

08002da8 <_fini>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr
